this_row <- bind_cols(label = as.character(growth_label$label), k = growth_label$k,
start_pt = growth_label$start, end_pt = growth_label$end,
start_day = start_day, end_day = end_day,
start_abund = start_abund, end_abund = end_abund, change_abund = change_abund)
growth_final <- bind_rows(growth_final, this_row)
}
# Labels of estimated taxa
est_labels <- as.character(growth_estimates$label)
# Extract from relational abundance table and clean up
norm_tidy <- norm_prepped %>%
filter(label %in% est_labels) %>%
select(label, everything(), norm_abund_avg, ln_norm_abund_avg=abund, Day=time) %>%
select(label, Inoculant, DOC, ASV, Day, norm_abund_avg, ln_norm_abund_avg)
# Add back metadata
growth_tidy <- growth_final %>%
mutate(DOC = if_else(grepl("high", label), "high", "low"),
Inoculant = gsub("[a-z]+([0-9]+)_.+", "\\1", label),
ASV = gsub("[a-z]+[0-9]+_(.+)", "\\1", label)) %>%
select(label, DOC, Inoculant, ASV, k:change_abund)
growth_tidy %>%
group_by(Inoculant) %>%
summarize(total = n()) %>%
ungroup() %>%
summarize(total_mean = mean(total), total_sd = mean(total))
# For messing with graphs
growth_testing <- head(growth_tidy)
count <- 0
for (l in as.character(growth_tidy$label)) {
count <- count + 1
# Subset time series
growth_label <- filter(growth_tidy, label==l)
norm_label <- filter(norm_tidy, label==l) %>%
arrange(Day)
# Title information
asv <- growth_label$ASV
tax_info <- filter(tax, ASV == asv)
title <- paste0(count, ". ", tax_info$Phylum, ", ", tax_info$Genus)
# Graph with estimate
graph <- ggplot(norm_label, aes(x=Day, y=ln_norm_abund_avg)) +
geom_point(shape=1, size=2, color="#6F7378") +
geom_line(color="#6F7378") +
geom_smooth(method="lm", data=norm_label[growth_label$start_pt:growth_label$end_pt,], linetype=2, color="black") +
labs(title=title, x="Day", y="ln Relational abundance") +
theme_test() +
theme(title = element_text(size=18),
axis.title = element_text(size=16),
axis.text = element_text(size=14))
# Print
print(graph)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
rm(list=ls())
library(tidyverse)
require(broom)
library(lmerTest)
# Import data
doc = readRDS("../data_DOC/SFA2/SFA2_doc.rds") %>%
mutate(sample_id = as.numeric(sample_id)) %>%
select(sample_id, "doc"=mean)
# Import metadata
meta = read.csv("../data_DOC/SFA2/SFA2_doc_metadata.csv") %>%
mutate(Inoculant = as.character(Inoculant))
# Merge
doc.meta = full_join(meta, doc, by=c("Sample" = "sample_id"))
ggplot(doc.meta, aes(x=Inoculant, y=doc, color=DOC_pheno)) +
geom_point() +
facet_wrap(~Group) +
theme_test() +
labs(x="Sample", y="DOC conc.")
ggplot(doc.meta, aes(x=DOC_pheno, y=doc)) +
geom_boxplot() +
facet_wrap(~Group) +
theme_test() +
labs(x="Sample", y="DOC conc.")
doc.plot <- doc.meta %>%
filter(DOC_pheno != "control", Group=="Headspace") %>%
ggplot(aes(DOC_pheno, y=doc)) +
geom_boxplot() +
labs(x="DOC \"phenotype\"", y="DOC conc. (ppm)") +
#annotate("text", x=2.1, y=950, label="P-value = 0.0123") +
theme_test() +
theme(title = element_text(size=18),
axis.title = element_text(size=16),
axis.text = element_text(size=14))
doc.plot
headspace.doc = filter(doc.meta, Group=="Headspace" & Type=="Sample")
head.doc.lmer = lmer(doc ~ DOC_pheno + (1|Inoculant), data = headspace.doc) # linear mixed effects model, allow inoculant to vary independently
hist(residuals(head.doc.lmer))
plot(predict(head.doc.lmer), residuals(head.doc.lmer))
anova(head.doc.lmer)
growth.doc = filter(doc.meta, Group=="Growth" & Type=="Sample")
grow.doc.lmer = lmer(log(doc) ~ DOC_pheno + (1|Inoculant), data = growth.doc) # linear mixed effects model, allow inoculant to vary independently
hist(residuals(grow.doc.lmer))
plot(predict(grow.doc.lmer), residuals(grow.doc.lmer))
anova(grow.doc.lmer)
head(growth.doc)
str(growth.doc$doc)
str(growth.doc$DOC_pheno)
lm(doc ~ DOC_pheno*Group, data=filter(growth.doc, DOC_pheno!="control"))
class(growth.doc$DOC_pheno)
class(growth.doc$group)
class(growth.doc$Group)
levels(growth.doc$Group)
levels(growth.doc$DOC_pheno)
str(growth.doc)
View(growth.doc)
head(doc.meta)
str(doc.meta)
lm(doc ~ DOC_pheno*Group, data=filter(doc.meta, DOC_pheno!="control"))
both_lm <- lm(doc ~ DOC_pheno*Group, data=filter(doc.meta, DOC_pheno!="control"))
hist(resid(both_lm))
both_lm <- lm(log(doc) ~ DOC_pheno*Group, data=filter(doc.meta, DOC_pheno!="control"))
hist(resid(both_lm))
full_lm <- lm(log(doc) ~ DOC_pheno*Group, data=filter(doc.meta, DOC_pheno!="control"))
hist(resid(full_lm))
plot(predict(full_lm), resid(full_lm))
full_lm <- lm(doc ~ DOC_pheno*Group, data=filter(doc.meta, DOC_pheno!="control"))
hist(resid(full_lm))
plot(predict(full_lm), resid(full_lm))
full_lm <- lm(log(doc) ~ DOC_pheno*Group, data=filter(doc.meta, DOC_pheno!="control"))
hist(resid(full_lm))
plot(predict(full_lm), resid(full_lm))
anova(full_lm)
full_lm <- lm(log(doc) ~ Group*DOC_pheno, data=filter(doc.meta, DOC_pheno!="control"))
hist(resid(full_lm))
plot(predict(full_lm), resid(full_lm))
anova(full_lm)
full_lm <- lm(log(doc) ~ DOC_pheno*Group, data=filter(doc.meta, DOC_pheno!="control"))
hist(resid(full_lm))
plot(predict(full_lm), resid(full_lm))
anova(full_lm)
growth.doc = filter(doc.meta, Group=="Growth" & Type=="Sample")
grow.doc.lmer = lmer(log(doc) ~ DOC_pheno + (1 + DOC_pheno|Inoculant), data = growth.doc) # linear mixed effects model, allow inoculant to vary independently
hist(residuals(grow.doc.lmer))
plot(predict(grow.doc.lmer), residuals(grow.doc.lmer))
head.doc.lmer = lmer(doc ~ DOC_pheno + (1 + DOC_pheno|Inoculant), data = headspace.doc) # linear mixed effects model, allow inoculant to vary independently
hist(residuals(head.doc.lmer))
plot(predict(head.doc.lmer), residuals(head.doc.lmer))
anova(head.doc.lmer)
grow.doc.lmer = lmer(log(doc) ~ DOC_pheno + (1 + DOC_pheno|Inoculant), data = growth.doc) # linear mixed effects model, allow inoculant to vary independently
hist(residuals(grow.doc.lmer))
plot(predict(grow.doc.lmer), residuals(grow.doc.lmer))
anova(grow.doc.lmer)
full_lm <- lm(log(doc) ~ DOC_pheno*Group + (1 + DOC_pheno | Inoculant), data=filter(doc.meta, DOC_pheno!="control"))
full_lm <- lmer(log(doc) ~ DOC_pheno*Group + (1 + DOC_pheno | Inoculant), data=filter(doc.meta, DOC_pheno!="control"))
hist(resid(full_lm))
plot(predict(full_lm), resid(full_lm))
aov(log(doc) ~ DOC_pheno*Group, data=filter(doc.meta, DOC_pheno!="control"))
anova(log(doc) ~ DOC_pheno*Group, data=filter(doc.meta, DOC_pheno!="control"))
Anova(log(doc) ~ DOC_pheno*Group, data=filter(doc.meta, DOC_pheno!="control"))
summary(aov(log(doc) ~ DOC_pheno*Group, data=filter(doc.meta, DOC_pheno!="control")))
anova(full_lm)
summary(full_lm)
anova(full_lm)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
knitr::opts_chunk$set(message = FALSE)
# Clear working directory, load in packages, generate package info
rm(list=ls())
library("tidyverse")
library("vegan")
library("ape")
library("phyloseq")
library("reticulate")
sessionInfo()
# Phyloseq object
physeq <- readRDS("../data_intermediate/SFA2_physeq_counts.rds")
physeq
# Growth estimates
growth <- readRDS("../data_intermediate/SFA2_growth_estimates_pap2.rds")
# Extract count and metadata from processed phyloseq object
count_all <- data.frame(otu_table(physeq))
meta_all <- data.frame(sample_data(physeq)) %>%
select(-SampleID) %>%
rownames_to_column(var="SampleID")
# Calculate read depth per sample
read_depth <- count_all %>%
rownames_to_column(var="ASV") %>%
gather(SampleID, count, -ASV) %>%
spread(ASV, count) %>%
mutate(total_reads = rowSums(.[-1])) %>%
select(SampleID, total_reads) %>%
inner_join(meta_all) %>%
mutate(Attempt = as_factor(Attempt)) %>%
as_tibble()
# Min and max read depth
max(read_depth$total_reads)
min(read_depth$total_reads)
# Visualize
read_depth %>%
mutate(Replicate = as_factor(Replicate)) %>%
filter(Type != "PCR control") %>%
ggplot(aes(x=Sample, y=total_reads, fill=Replicate)) +
geom_col() +
geom_hline(yintercept = 6000, linetype=2) +
labs(x="Sample", y="Reads") +
theme_test()
max(read_depth$total_reads)
min(read_depth$total_reads)
# Number of samples below 6000 counts
dim(filter(read_depth, Type != "PCR control" & total_reads < 1000))
filter(read_depth, Type != "PCR control" & total_reads < 1000) %>% arrange(total_reads)
physeq_rare <- rarefy_even_depth(physeq, sample.size=1000, rngseed=42)
physeq_rare <- subset_samples(physeq_rare, DOC %in% c("high", "low"))
physeq_rare
# Reformat metadata
meta <- data.frame(sample_data(physeq_rare)) %>%
as_tibble() %>%
mutate(Inoculant = as_factor(Inoculant))
# Reformat tree
tree_new <- multi2di(phy_tree(physeq_rare))
# Phyloseq
physeq_rare <- phyloseq(otu_table(physeq_rare, taxa_are_rows = TRUE), sample_data(meta),
tax_table(physeq_rare), phy_tree(tree_new))
# Extract data from phyloseq
count_rare <- data.frame(otu_table(physeq_rare)) %>%
rownames_to_column(var="ASV") %>%
gather(SampleID, count, -ASV)
tax_rare <- data.frame(tax_table(physeq_rare)) %>%
rownames_to_column(var="ASV")
meta_rare <- data.frame(sample_data(physeq_rare)) %>%
select(-SampleID) %>%
rownames_to_column(var="SampleID")
# Combine
count_tax_meta <- inner_join(count_rare, tax_rare) %>%
inner_join(meta_rare, by="SampleID") %>%
select(c(SampleID, Sample, Type:DOC, Day, Domain:Species, ASV, count)) %>%
mutate(Inoculant = as_factor(Inoculant)) %>%
mutate(across(Domain:Species, ~as.character(.x), {.col}))
richness <- count_tax_meta %>%
filter(count > 0) %>%
filter(ASV != "445e8681c3c1a735760e6c394f5f4d0a") %>%  # remove spike-in
group_by(Sample, Inoculant, DOC, Day) %>%
summarize(richness = n()) %>%
ungroup()
# Reformat counts to be compatible with vegan
count_tax_meta_wide <- count_tax_meta %>%
select(ASV, Sample, count) %>%
pivot_wider(names_from="ASV", values_from="count") %>%
column_to_rownames(var="Sample")
# Calculate
shannon <- diversity(count_tax_meta_wide, "shannon")
rich <- specnumber(count_tax_meta_wide)
even <- shannon/log(rich)
# Add evennness values to data
even <- data.frame(even) %>%
rownames_to_column(var="Sample") %>%
rename(evenness=even) %>%
mutate(Sample = as.numeric(Sample))
alpha_df <- richness %>%
inner_join(even)
# Summarized data
alpha_overall <- alpha_df %>%
group_by(DOC, Inoculant) %>%
summarize(rich_sd = sd(richness), rich_mean = mean(richness),
even_sd = sd(evenness), even_mean = mean(evenness)) %>%
ungroup() %>%
mutate(rich_cv = rich_sd/rich_mean, even_cv = even_sd/even_mean)
alpha_tp30 <- alpha_df %>%
group_by(Inoculant, Day) %>%
summarize(rich_mean = mean(richness), rich_sd = sd(richness), even_mean = mean(evenness), even_sd = sd(evenness)) %>%
ungroup() %>%
filter(Day==30)
alpha_df %>%
filter(Day==30) %>%
summarize(rich_mean = mean(richness), rich_sd = sd(richness), even_mean = mean(evenness), even_sd = sd(evenness))
# Find overlapping asvs
# Community counts
physeq_grtp30 <- subset_samples(physeq_rare, Day==30 & Type=="Growth")
meta_grtp30 <- data.frame(sample_data(physeq_grtp30)) %>%
select(SampleID, Inoculant) %>%
rownames_to_column(var="Sample")
asvs_grtp30 <- data.frame(otu_table(physeq_grtp30)) %>%
rownames_to_column(var="ASV") %>%
pivot_longer(-ASV, names_to="Sample", values_to="count") %>%
filter(count > 0) %>% # remove ASVs not present in these samples
inner_join(meta_grtp30)
# Growth estimates
growth_overlap <- growth %>%
select(Inoculant, ASV) %>%
inner_join(asvs_grtp30) %>%
select(Sample, SampleID, Inoculant, ASV, count)
# Total ASVs in final community vs overlapping
overlap_totals <- growth_overlap %>%
group_by(Inoculant) %>%
summarize(overlap = n()) %>%
ungroup()
comm_totals <- asvs_grtp30 %>%
group_by(Inoculant) %>%
summarize(total = n()) %>%
ungroup()
overlap_prop <- full_join(overlap_totals, comm_totals) %>%
mutate(prop = overlap/total)
mean(overlap_prop$prop)
sd(overlap_prop$prop)
# Richness
alpha_df %>%
ggplot(aes(x=DOC, y=richness)) +
geom_boxplot() +
labs(x="DOC \"phentoype\"", y="ASV richness") +
facet_wrap(~Day) +
theme_test() +
theme(title = element_text(size=18),
axis.title = element_text(size=16),
axis.text = element_text(size=14))
alpha_df %>%
ggplot(aes(x=DOC, y=richness, color=Inoculant)) +
geom_boxplot() +
labs(x="DOC \"phentoype\"", y="ASV richness") +
facet_wrap(~Day) +
theme_test() +
theme(title = element_text(size=18),
axis.title = element_text(size=16),
axis.text = element_text(size=14))
alpha_overall %>%
ggplot(aes(x=DOC, y=rich_mean)) +
geom_point() +
theme_test()
alpha_overall %>%
ggplot(aes(x=DOC, y=rich_cv)) +
geom_point() +
theme_test()
# Evenness
alpha_df %>%
ggplot(aes(x=DOC, y=evenness)) +
geom_boxplot() +
facet_wrap(~Day) +
labs(x="DOC \"phentoype\"", y="Evenness") +
theme_test() +
theme(title = element_text(size=18),
axis.title = element_text(size=16),
axis.text = element_text(size=14))
alpha_df %>%
ggplot(aes(x=DOC, y=evenness, color=Inoculant)) +
geom_boxplot() +
facet_wrap(~Day) +
labs(x="DOC \"phentoype\"", y="Evenness") +
theme_test() +
theme(title = element_text(size=18),
axis.title = element_text(size=16),
axis.text = element_text(size=14))
alpha_overall %>%
ggplot(aes(x=DOC, y=even_mean)) +
geom_point() +
theme_test()
alpha_overall %>%
ggplot(aes(x=DOC, y=even_cv)) +
geom_point() +
theme_test()
# Evenness overall
even_lm <- lm(log(even_mean) ~ DOC, data=alpha_overall)
hist(residuals(even_lm)) # log transform helps normality
plot(predict(even_lm), residuals(even_lm)) # Heteroskedastic
# Welch's t-test
t.test(log(even_mean) ~ DOC, data=alpha_overall)
# Evenness CV
cveven_lm <- lm(even_cv ~ DOC, data=alpha_overall)
hist(residuals(cveven_lm))
plot(predict(cveven_lm), residuals(cveven_lm))
summary(cveven_lm)
# Weighted Unifrac
wunifrac_dist <- distance(physeq_rare, method="wunifrac")
ord_wunifrac <- ordinate(physeq_rare, distance=wunifrac_dist, method="PCoA")
plot_ordination(physeq_rare, ord_wunifrac, color="DOC") +
stat_ellipse(type="t") +
facet_wrap(~Day) +
theme_test() +
theme(title = element_text(size=18),
axis.title = element_text(size=16),
axis.text = element_text(size=14))
# Ctrl+Shift+C to comment multiple lines
# # Plot each day individually for animation
# for (day in unique(sample_data(physeq_rare)$Day)) {
#   graph <- plot_ordination(subset_samples(physeq_rare, Day==day), ord_wunifrac, color="Inoculant") +
#     facet_wrap(~DOC) +
#     labs(title=paste0("Day ", day)) +
#     theme_test() +
#     theme(title = element_text(size=18),
#         axis.title = element_text(size=16),
#         axis.text = element_text(size=14))
#   print(graph)
# }
# Unweighted unifrac
unifrac_dist <- distance(physeq_rare, method="unifrac")
ord_unifrac <- ordinate(physeq_rare, distance=unifrac_dist, method="PCoA")
plot_ordination(physeq_rare, ord_unifrac, color="DOC") +
stat_ellipse(type="t") +
facet_wrap(~Day) +
theme_test() +
theme(title = element_text(size=18),
axis.title = element_text(size=16),
axis.text = element_text(size=14))
# Calculate distances
wunifrac_dist <- distance(physeq_rare, "wunifrac")
# Reformat distance object
wunifrac_m <- as.matrix(wunifrac_dist)
diag(wunifrac_m) <- NA # remove self comparisons
wunifrac_m[upper.tri(wunifrac_m)] <-NA # remove redundant comparisons
wunifrac_df <- wunifrac_m %>%
as.data.frame() %>%
rownames_to_column(var="sample1") %>%
pivot_longer(!sample1, names_to="sample2", values_to="wunifrac") %>%
na.omit()
# Add metadata
meta_slim <- meta_rare %>%
select(SampleID, DOC, Inoculant, Day)
wunifrac_meta <- wunifrac_df %>%
full_join(meta_slim, by=c("sample1"="SampleID")) %>%
rename(DOC1 = DOC, Innoc1 = Inoculant, Day1=Day) %>%
full_join(meta_slim, by=c("sample2"="SampleID")) %>%
rename(DOC2 = DOC, Innoc2 = Inoculant, Day2=Day) %>%
select(sample1, sample2, DOC1, DOC2, Innoc1, Innoc2, Day1, Day2, wunifrac) %>%
filter(Day1==Day2)
# Plot
wunifrac_meta %>%
mutate(target = if_else(Innoc1==Innoc2, "yes", "no")) %>%
filter(target=="yes") %>%
ggplot(aes(x=DOC1, y=wunifrac, group=Innoc1, color=DOC1)) +
geom_boxplot() +
facet_wrap(~Day1) +
theme_test()
wunifrac_meta %>%
mutate(target = if_else(Innoc1==Innoc2, "yes", "no")) %>%
filter(target=="yes") %>%
ggplot(aes(x=DOC1, y=wunifrac, color=DOC1)) +
geom_boxplot() +
facet_wrap(~Day1) +
theme_test()
wunifrac_meta %>%
mutate(target = if_else(Innoc1==Innoc2, "yes", "no")) %>%
filter(target=="yes") %>%
ggplot(aes(x=DOC1, y=wunifrac, group=Innoc1)) +
geom_boxplot() +
theme_test()
physeq_end <- subset_samples(physeq, Day==30)
# Extract count and metadata from processed phyloseq object
count_end <- data.frame(otu_table(physeq_end))
meta_end <- data.frame(sample_data(physeq_end)) %>%
select(-SampleID) %>%
rownames_to_column(var="SampleID") %>%
mutate(Inoculant == as.character(Inoculant))
# Calculate read depth per sample
read_depth <- count_end %>%
rownames_to_column(var="ASV") %>%
gather(SampleID, count, -ASV) %>%
spread(ASV, count) %>%
mutate(total_reads = rowSums(.[-1])) %>%
select(SampleID, total_reads) %>%
inner_join(meta_end) %>%
mutate(Attempt = as_factor(Attempt)) %>%
as_tibble()
# Min and max read depth
max(read_depth$total_reads)
min(read_depth$total_reads)
# Visualize
read_depth %>%
mutate(Replicate = as_factor(Replicate)) %>%
filter(Type != "PCR control") %>%
ggplot(aes(x=Sample, y=total_reads, fill=Replicate)) +
geom_col() +
labs(x="Sample", y="Reads") +
theme_test()
max(read_depth$total_reads)
min(read_depth$total_reads)
# Number of samples below 6000 counts
dim(filter(read_depth, Type != "PCR control" & total_reads <= 1034))
filter(read_depth, Type != "PCR control" & total_reads <= 1034) %>% arrange(total_reads)
physeq_rare_end <- rarefy_even_depth(physeq_end, sample.size=1034, rngseed=42)
physeq_rare_hilow <- subset_samples(physeq_rare_end, DOC %in% c("high", "low"))
physeq_rare_hilow
set.seed(22)
# Weighted Unifrac
wunifrac_dist <- distance(physeq_rare_hilow, method="wunifrac")
ord_wunifrac <- ordinate(physeq_rare_hilow, distance=wunifrac_dist, method="NMDS")
plot_ordination(physeq_rare_hilow, ord_wunifrac, color="Type") +
stat_ellipse(type="t") +
facet_wrap(~DOC) +
theme_test() +
theme(title = element_text(size=18),
axis.title = element_text(size=16),
axis.text = element_text(size=14))
# High only
physeq_end_high <- subset_samples(physeq_rare_hilow, DOC=="high")
high_dist <- distance(physeq_end_high, method="wunifrac")
high_ord <- ordinate(physeq_end_high, distance=high_dist, method="NMDS")
plot_ordination(physeq_end_high, high_ord, color="Type") +
stat_ellipse(type="t") +
labs(title="High DOC") +
theme_test() +
theme(title = element_text(size=18),
axis.title = element_text(size=16),
axis.text = element_text(size=14))
# Low only
physeq_end_low <- subset_samples(physeq_rare_hilow, DOC=="low")
low_dist <- distance(physeq_end_low, method="wunifrac")
low_ord <- ordinate(physeq_end_low, distance=low_dist, method="NMDS")
plot_ordination(physeq_end_low, low_ord, color="Type") +
stat_ellipse(type="t") +
labs(title="Low DOC") +
theme_test() +
theme(title = element_text(size=18),
axis.title = element_text(size=16),
axis.text = element_text(size=14))
# High DOC
high_df <- data.frame(sample_data(physeq_end_high))
high_adonis <- adonis(high_dist~Type, data=high_df, permutations=999)
high_adonis
# Low DOC
low_df <- data.frame(sample_data(physeq_end_low))
low_adonis <- adonis(low_dist~Type, data=low_df, permutations=999)
low_adonis
