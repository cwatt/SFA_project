library(cowplot)
sessionInfo()
rm(list=ls())
# List of directories containing data files
dir = list.dirs(path="../data_CO2/SFA2/data", full.names=TRUE, recursive=FALSE)
# Create lists of .txt files from directories
files = list()
for (i in dir) {
files[[i]] <- list.files(path=i, pattern="*.txt", full.names=TRUE, recursive=FALSE)
}
# Extract area data
# TIC, w/z44 (12C), w/z45 (13C)
# Construct data frame containing all data
area_df = tibble() # initialize empty tibble
for (i in names(files)) { # for each list of files (refers to a directory)
for (x in files[[i]]) { # for each file in the selected list (directory)
# Create sample names based on file names
# Strips the rest of the path from the sample name at the end
name = str_remove(x, "../data_CO2/SFA2/data/.+/") %>%
str_remove(".txt")
#name.list[[i]] = append(name.list[[i]], name)
# Isolate time point info
date = str_remove(x, "../data_CO2/SFA2/data/") %>%
str_remove("/.+.txt") %>%
str_remove(".+_")
tp = str_remove(x, "../data_CO2/SFA2/data/") %>%
str_remove("/.+.txt") %>%
str_remove("_.+")
# Isolate the area data and clean up
dat = read_tsv(x, skip=7, col_names=TRUE) %>%
select("Measurement" = Name, Area) %>% # keep only the name of sample and the area measurements collected
drop_na() %>%
mutate(Measurement = case_when(Measurement == "TIC" ~ "Ctotal", # more explicit measurement labels
Measurement == "m/z 44" ~ "C12",
Measurement == "m/z 45" ~ "C13"),
TP = tp, # adding additional metadata...
Date = date,
Sample = name)
area_df = rbind(area_df, dat) # add to master data frame
}
}
# Parse dates
area_df = area_df %>%
mutate(Date = gsub("([0-2]{2})([0-9]{2})([0-2]{2})", "\\1-\\2-20\\3", Date)) %>%
mutate(Date = parse_date(Date, "%m-%d-%Y"))
# Calculate
area_df = area_df %>%
pivot_wider(names_from = Measurement, values_from = Area) %>%
mutate(area_C1213 = C12+C13)
std_df = area_df %>%
filter(str_detect(Sample, "std"))
# Calculate adjusted areas
std_df = std_df %>%
mutate(area_adj = if_else(str_detect(Sample, "[7-9]"), area_C1213*1.8, area_C1213, missing=NULL), # correct split-ratio
ppm = case_when(Sample == "std0" ~ 0, # add ppm
Sample == "std1" ~ 769,
Sample == "std2" ~ 1538,
Sample == "std3" ~ 3077,
Sample == "std4" ~ 7692,
Sample == "std5" ~ 15385,
Sample == "std6" ~ 30769,
Sample == "std7" ~ 76923,
Sample == "std7.5" ~ 153856,
Sample == "std8" ~ 230769,
Sample == "std8.5" ~ 307692,
Sample == "std9" ~ 384615))
std_df %>%
ggplot(aes(x=ppm, y=area_adj)) +
geom_point() +
geom_smooth(method="lm") +
facet_wrap(~Date, scales="free") +
theme_test()
# Linear regressions
std_cal <- tibble()
for (x in unique(std_df$Date)) {
dat <- filter(std_df, Date==x)
std_lm <- lm(area_adj ~ ppm, dat)
this_row <- bind_cols(Date = unique(dat$Date), # save results
intercept = summary(std_lm)$coefficients[1,1],
slope = summary(std_lm)$coefficients[2,1],
adjR2 = summary(std_lm)$adj.r.squared,
pval = summary(std_lm)$coefficients[2,4])
std_cal <- bind_rows(std_cal, this_row)
}
std_cal
std_df %>%
filter(Sample != "std1") %>%
ggplot(aes(x=ppm, y=area_adj)) +
geom_point() +
geom_smooth(method="lm") +
facet_wrap(~Date, scales="free") +
theme_test()
# Linear regressions
std_cal1 <- tibble()
for (x in unique(std_df$Date)) {
dat1 <- filter(std_df, Date==x & Sample != "std1")
std_lm1 <- lm(area_adj ~ ppm, dat)
date1 <- unique(dat1$Date)
this_row1 <- bind_cols(Date = date, coeff = summary(std_lm1)$coefficients[2,1], adjR2 = summary(std_lm1)$adj.r.squared , pval = summary(std_lm1)$coefficients[2,4]) # save coefficent, adj. R2, and p-value
std_cal1 <- bind_rows(std_cal, this_row)
}
std_cal1
std_df %>%
filter(!(Sample %in% c("std1", "std4"))) %>%
ggplot(aes(x=ppm, y=area_adj)) +
geom_point() +
geom_smooth(method="lm") +
facet_wrap(~Date, scales="free") +
theme_test()
# Linear regressions
std_cal14 <- tibble()
for (x in unique(std_df$Date)) {
dat14 <- filter(std_df, Date==x & Sample != "std1")
std_lm14 <- lm(area_adj ~ ppm, dat14)
this_row14 <- bind_cols(coeff = summary(std_lm14)$coefficients[2,1], adjR2 = summary(std_lm14)$adj.r.squared , pval = summary(std_lm14)$coefficients[2,4]) # save coefficent, adj. R2, and p-value
std_cal14 <- bind_rows(std_cal14, this_row14)
}
std_cal14
sample_df <- anti_join(area_df, std_df) %>%
mutate(dummy_ppm = 0) %>% # dummy ppm for graphing with standards on ppm axis
filter(!str_detect(Sample, "[a-z]")) %>% # exclude other non-samples
mutate(Sample, Sample = parse_number(Sample)) # convert to numeric
# Import metadata
meta_sample <- read_csv("../data_CO2/SFA2/SFA2_headspace_metadata.csv") %>%
mutate(Inoculant = as.character(Inoculant)) %>%
select(Sample, Inoculant)
meta_tp <- read_tsv("../data_CO2/SFA2/headspace_tps_metadata.tsv")
# Merge metadata with CO2 data
sample_df <- full_join(sample_df, meta_sample, by="Sample") %>%
mutate(TP = gsub("tp", "", TP),
TP = as.numeric(TP)) %>%
left_join(meta_tp, by="TP") %>%
select(Sample, Inoculant, TP, Date, Day, Timeframe, area_C1213, dummy_ppm)
# Compare samples against range of standards
std_df %>%
ggplot(aes(x=ppm, y=area_adj)) +
geom_point(shape=1) +
geom_point(aes(y=area_C1213, x=dummy_ppm, color=Date), data=sample_df) +
labs(title="Samples vs. standards") +
theme_test()
# Observe progression of CO2 production
sample_df %>%
mutate(Control = if_else(Sample %in% c(379:384), "Y", "N")) %>% # distinguish negative control
ggplot(aes(y=area_C1213, x=Date)) +
labs(y="Area") +
geom_jitter(aes(color = Control)) +
labs(title="Quick look - respiration over time") +
theme_test()
# Isolate outlier and correct
outlier <- sample_df %>%
subset(Sample==363 & TP==6) %>%
mutate(area_C1213 = area_C1213/2) # halve measurement
# Replace in dataframe
sample_df <- sample_df %>%
filter(!(Sample==363 & TP==6)) %>%
bind_rows(outlier)
# Convert sample area to ppm using calibration curves
sample_conv <- tibble()
for (d in unique(sample_df$Date)) {
cal = std_cal %>% filter(Date==d)
conv = sample_df %>%
filter(Date==d) %>%
mutate(ppm = (area_C1213 - cal$intercept)/cal$slope)
sample_conv = rbind(sample_conv, conv)
}
# Sanity check, plot against standards
std_df %>%
ggplot(aes(x=ppm, y=area_adj)) +
geom_point(shape=1) +
geom_point(aes(y=area_C1213, x=ppm, color=Date), data=sample_conv) +
#scale_y_continuous(limits=c(0,500000)) +
#scale_x_continuous(limits=c(0, 20000)) +
theme_test() +
theme()
# Ideal gas law: n=(P*V)/(R*temp)
# NOTE: pressure does not matter for this calulation because it's all relative to the stds
R <- 0.082057338 # universal gas constant, (L*atm)/(mol*K)
temp <- 296.48 # K, 74F in lab throughout experiment
V <- 0.013 # L, headspace of 30 mL serum bottle with sand
mwCO2 <- 44.01 # molecular weight (g/mol) of CO2
P <- 1 #atm, assumes 1 atm in ucosms during sampling
# Calculate per time point
molCO2100 <- P*V/(R*temp) # total mol of CO2 in headspace, if it were 100% CO2
mgCO2100 <- molCO2100 * mwCO2*1000 # mol * g/mol * 1000mg/g = mg, mg of CO2 present if it were 100% CO2
sample_conv <- mutate(sample_conv, mgCO2 = mgCO2100*(ppm*10^-6)) # actual mg CO2 based on ppm
# Cumulative mg CO2 and C
resp_total = sample_conv %>%
group_by(Sample, Inoculant) %>%
summarize(total_mgCO2 = sum(mgCO2), total_mgC = total_mgCO2*(12/44)) %>% # molar weight ratio of C in CO2
ungroup() %>%
mutate(Inoculant = as.character(Inoculant))
# Visualize
resp_total %>%
filter(!(Inoculant %in% c(0, 51))) %>% # remove controls
ggplot(aes(x=Inoculant, y=total_mgCO2)) +
geom_point() +
theme_test()
# Remove non-samples
resp_total_noctrl <- filter(resp_total, !(Inoculant %in% c(0, 51)))
# linear model
resp_total_lm <- lm(total_mgCO2 ~ Inoculant, data=resp_total_noctrl)
hist(resid(resp_total_lm)) # non-normal
# Kruskal-Wallis
kruskal.test(total_mgCO2 ~ Inoculant, data=resp_total_noctrl)
resp_rate <- sample_conv %>%
select(Sample, Inoculant, Day, Timeframe, mgCO2) %>%
mutate(mgCO2_day = mgCO2/Timeframe) %>%
filter(!is.infinite(mgCO2_day)) # remove day 0 (no rate possible)
# Average replicates for each inoculant
resp_rate_mean <- resp_rate %>%
group_by(Inoculant, Day) %>%
summarize(mgCO2_day = mean(mgCO2_day))
resp_rate_mean %>%
filter(!(Inoculant %in% c(0, 51))) %>%  # remove controls
ggplot(aes(x=Day, y=mgCO2_day)) +
geom_boxplot(aes(group=Day)) +
geom_jitter() +
theme_test()
# Import data
growth <- readRDS("../data_intermediate/SFA2_growth_estimates_pap.rds")
norm_abund <- readRDS("../data_intermediate/SFA2_norm_grestimated.rds")
# Combine
growth_abund <- full_join(growth, norm_abund)
# Calculate cellular production
cell_prod_asv <- growth_abund %>%
mutate(cell_prod = k*norm_abund_avg) %>%
select(ASV, Inoculant, Day, k, norm_abund_avg, cell_prod)
# Total cellular production per day
cell_prod_day <- cell_prod_asv %>%
group_by(Inoculant, Day) %>%
summarize(total_cell_prod = sum(cell_prod))
# By day, all ASVs
cell_prod_asv %>%
ggplot(aes(x=Day, y=log(cell_prod))) +
geom_jitter() +
geom_smooth() +
facet_wrap(~Inoculant) +
theme_test()
# Total production (ASVs summed)
cell_prod_day %>%
ggplot(aes(x=Day, y=log(total_cell_prod))) +
geom_jitter() +
geom_smooth() +
theme_test()
cell_resp_rate <- cell_prod_day %>%
inner_join(resp_rate_mean, by=c("Inoculant", "Day"))
cell_resp_rate %>%
ggplot(aes(x=mgCO2_day, y=log(total_cell_prod))) +
geom_point() +
geom_smooth(method="lm") +
theme_test()
cor.test(cell_resp_rate$total_cell_prod, cell_resp_rate$mgCO2_day)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(tidyverse)
library(cowplot)
sessionInfo()
rm(list=ls())
# List of directories containing data files
dir = list.dirs(path="../data_CO2/SFA2/data", full.names=TRUE, recursive=FALSE)
# Create lists of .txt files from directories
files = list()
for (i in dir) {
files[[i]] <- list.files(path=i, pattern="*.txt", full.names=TRUE, recursive=FALSE)
}
# Extract area data
# TIC, w/z44 (12C), w/z45 (13C)
# Construct data frame containing all data
area_df = tibble() # initialize empty tibble
for (i in names(files)) { # for each list of files (refers to a directory)
for (x in files[[i]]) { # for each file in the selected list (directory)
# Create sample names based on file names
# Strips the rest of the path from the sample name at the end
name = str_remove(x, "../data_CO2/SFA2/data/.+/") %>%
str_remove(".txt")
#name.list[[i]] = append(name.list[[i]], name)
# Isolate time point info
date = str_remove(x, "../data_CO2/SFA2/data/") %>%
str_remove("/.+.txt") %>%
str_remove(".+_")
tp = str_remove(x, "../data_CO2/SFA2/data/") %>%
str_remove("/.+.txt") %>%
str_remove("_.+")
# Isolate the area data and clean up
dat = read_tsv(x, skip=7, col_names=TRUE) %>%
select("Measurement" = Name, Area) %>% # keep only the name of sample and the area measurements collected
drop_na() %>%
mutate(Measurement = case_when(Measurement == "TIC" ~ "Ctotal", # more explicit measurement labels
Measurement == "m/z 44" ~ "C12",
Measurement == "m/z 45" ~ "C13"),
TP = tp, # adding additional metadata...
Date = date,
Sample = name)
area_df = rbind(area_df, dat) # add to master data frame
}
}
# Parse dates
area_df = area_df %>%
mutate(Date = gsub("([0-2]{2})([0-9]{2})([0-2]{2})", "\\1-\\2-20\\3", Date)) %>%
mutate(Date = parse_date(Date, "%m-%d-%Y"))
# Calculate
area_df = area_df %>%
pivot_wider(names_from = Measurement, values_from = Area) %>%
mutate(area_C1213 = C12+C13)
std_df = area_df %>%
filter(str_detect(Sample, "std"))
# Calculate adjusted areas
std_df = std_df %>%
mutate(area_adj = if_else(str_detect(Sample, "[7-9]"), area_C1213*1.8, area_C1213, missing=NULL), # correct split-ratio
ppm = case_when(Sample == "std0" ~ 0, # add ppm
Sample == "std1" ~ 769,
Sample == "std2" ~ 1538,
Sample == "std3" ~ 3077,
Sample == "std4" ~ 7692,
Sample == "std5" ~ 15385,
Sample == "std6" ~ 30769,
Sample == "std7" ~ 76923,
Sample == "std7.5" ~ 153856,
Sample == "std8" ~ 230769,
Sample == "std8.5" ~ 307692,
Sample == "std9" ~ 384615))
std_df %>%
ggplot(aes(x=ppm, y=area_adj)) +
geom_point() +
geom_smooth(method="lm") +
facet_wrap(~Date, scales="free") +
theme_test()
# Linear regressions
std_cal <- tibble()
for (x in unique(std_df$Date)) {
dat <- filter(std_df, Date==x)
std_lm <- lm(area_adj ~ ppm, dat)
this_row <- bind_cols(Date = unique(dat$Date), # save results
intercept = summary(std_lm)$coefficients[1,1],
slope = summary(std_lm)$coefficients[2,1],
adjR2 = summary(std_lm)$adj.r.squared,
pval = summary(std_lm)$coefficients[2,4])
std_cal <- bind_rows(std_cal, this_row)
}
std_cal
std_df %>%
filter(Sample != "std1") %>%
ggplot(aes(x=ppm, y=area_adj)) +
geom_point() +
geom_smooth(method="lm") +
facet_wrap(~Date, scales="free") +
theme_test()
# Linear regressions
std_cal1 <- tibble()
for (x in unique(std_df$Date)) {
dat1 <- filter(std_df, Date==x & Sample != "std1")
std_lm1 <- lm(area_adj ~ ppm, dat)
date1 <- unique(dat1$Date)
this_row1 <- bind_cols(Date = date, coeff = summary(std_lm1)$coefficients[2,1], adjR2 = summary(std_lm1)$adj.r.squared , pval = summary(std_lm1)$coefficients[2,4]) # save coefficent, adj. R2, and p-value
std_cal1 <- bind_rows(std_cal, this_row)
}
std_cal1
std_df %>%
filter(!(Sample %in% c("std1", "std4"))) %>%
ggplot(aes(x=ppm, y=area_adj)) +
geom_point() +
geom_smooth(method="lm") +
facet_wrap(~Date, scales="free") +
theme_test()
# Linear regressions
std_cal14 <- tibble()
for (x in unique(std_df$Date)) {
dat14 <- filter(std_df, Date==x & Sample != "std1")
std_lm14 <- lm(area_adj ~ ppm, dat14)
this_row14 <- bind_cols(coeff = summary(std_lm14)$coefficients[2,1], adjR2 = summary(std_lm14)$adj.r.squared , pval = summary(std_lm14)$coefficients[2,4]) # save coefficent, adj. R2, and p-value
std_cal14 <- bind_rows(std_cal14, this_row14)
}
std_cal14
sample_df <- anti_join(area_df, std_df) %>%
mutate(dummy_ppm = 0) %>% # dummy ppm for graphing with standards on ppm axis
filter(!str_detect(Sample, "[a-z]")) %>% # exclude other non-samples
mutate(Sample, Sample = parse_number(Sample)) # convert to numeric
# Import metadata
meta_sample <- read_csv("../data_CO2/SFA2/SFA2_headspace_metadata.csv") %>%
mutate(Inoculant = as.character(Inoculant)) %>%
select(Sample, Inoculant)
meta_tp <- read_tsv("../data_CO2/SFA2/headspace_tps_metadata.tsv")
# Merge metadata with CO2 data
sample_df <- full_join(sample_df, meta_sample, by="Sample") %>%
mutate(TP = gsub("tp", "", TP),
TP = as.numeric(TP)) %>%
left_join(meta_tp, by="TP") %>%
select(Sample, Inoculant, TP, Date, Day, Timeframe, area_C1213, dummy_ppm)
# Compare samples against range of standards
std_df %>%
ggplot(aes(x=ppm, y=area_adj)) +
geom_point(shape=1) +
geom_point(aes(y=area_C1213, x=dummy_ppm, color=Date), data=sample_df) +
labs(title="Samples vs. standards") +
theme_test()
# Observe progression of CO2 production
sample_df %>%
mutate(Control = if_else(Sample %in% c(379:384), "Y", "N")) %>% # distinguish negative control
ggplot(aes(y=area_C1213, x=Date)) +
labs(y="Area") +
geom_jitter(aes(color = Control)) +
labs(title="Quick look - respiration over time") +
theme_test()
# Isolate outlier and correct
outlier <- sample_df %>%
subset(Sample==363 & TP==6) %>%
mutate(area_C1213 = area_C1213/2) # halve measurement
# Replace in dataframe
sample_df <- sample_df %>%
filter(!(Sample==363 & TP==6)) %>%
bind_rows(outlier)
# Convert sample area to ppm using calibration curves
sample_conv <- tibble()
for (d in unique(sample_df$Date)) {
cal = std_cal %>% filter(Date==d)
conv = sample_df %>%
filter(Date==d) %>%
mutate(ppm = (area_C1213 - cal$intercept)/cal$slope)
sample_conv = rbind(sample_conv, conv)
}
# Sanity check, plot against standards
std_df %>%
ggplot(aes(x=ppm, y=area_adj)) +
geom_point(shape=1) +
geom_point(aes(y=area_C1213, x=ppm, color=Date), data=sample_conv) +
#scale_y_continuous(limits=c(0,500000)) +
#scale_x_continuous(limits=c(0, 20000)) +
theme_test() +
theme()
# Ideal gas law: n=(P*V)/(R*temp)
# NOTE: pressure does not matter for this calulation because it's all relative to the stds
R <- 0.082057338 # universal gas constant, (L*atm)/(mol*K)
temp <- 296.48 # K, 74F in lab throughout experiment
V <- 0.013 # L, headspace of 30 mL serum bottle with sand
mwCO2 <- 44.01 # molecular weight (g/mol) of CO2
P <- 1 #atm, assumes 1 atm in ucosms during sampling
# Calculate per time point
molCO2100 <- P*V/(R*temp) # total mol of CO2 in headspace, if it were 100% CO2
mgCO2100 <- molCO2100 * mwCO2*1000 # mol * g/mol * 1000mg/g = mg, mg of CO2 present if it were 100% CO2
sample_conv <- mutate(sample_conv, mgCO2 = mgCO2100*(ppm*10^-6)) # actual mg CO2 based on ppm
# Cumulative mg CO2 and C
resp_total = sample_conv %>%
group_by(Sample, Inoculant) %>%
summarize(total_mgCO2 = sum(mgCO2), total_mgC = total_mgCO2*(12/44)) %>% # molar weight ratio of C in CO2
ungroup() %>%
mutate(Inoculant = as.character(Inoculant))
# Visualize
resp_total %>%
filter(!(Inoculant %in% c(0, 51))) %>% # remove controls
ggplot(aes(x=Inoculant, y=total_mgCO2)) +
geom_point() +
theme_test()
# Remove non-samples
resp_total_noctrl <- filter(resp_total, !(Inoculant %in% c(0, 51)))
# linear model
resp_total_lm <- lm(total_mgCO2 ~ Inoculant, data=resp_total_noctrl)
hist(resid(resp_total_lm)) # non-normal
# Kruskal-Wallis
kruskal.test(total_mgCO2 ~ Inoculant, data=resp_total_noctrl)
resp_rate <- sample_conv %>%
select(Sample, Inoculant, Day, Timeframe, mgCO2) %>%
mutate(mgCO2_day = mgCO2/Timeframe) %>%
filter(!is.infinite(mgCO2_day)) # remove day 0 (no rate possible)
# Average replicates for each inoculant
resp_rate_mean <- resp_rate %>%
group_by(Inoculant, Day) %>%
summarize(mgCO2_day = mean(mgCO2_day))
resp_rate_mean %>%
filter(!(Inoculant %in% c(0, 51))) %>%  # remove controls
ggplot(aes(x=Day, y=mgCO2_day)) +
geom_boxplot(aes(group=Day)) +
geom_jitter() +
theme_test()
# Import data
growth <- readRDS("../data_intermediate/SFA2_growth_estimates_pap.rds")
norm_abund <- readRDS("../data_intermediate/SFA2_norm_grestimated.rds")
# Combine
growth_abund <- full_join(growth, norm_abund)# %>%
head(growth_abund)
# Combine
growth_abund <- full_join(growth, norm_abund) %>%
mutate(norm_abund_corr = norm_abund_avg / n16S)
# Calculate cellular production
cell_prod_asv <- growth_abund %>%
mutate(cell_prod = k*norm_abund_corr) %>%
select(ASV, Inoculant, Day, k, norm_abund_corr, cell_prod)
# Total cellular production per day
cell_prod_day <- cell_prod_asv %>%
group_by(Inoculant, Day) %>%
summarize(total_cell_prod = sum(cell_prod))
# By day, all ASVs
cell_prod_asv %>%
ggplot(aes(x=Day, y=log(cell_prod))) +
geom_jitter() +
geom_smooth() +
facet_wrap(~Inoculant) +
theme_test()
# Total production (ASVs summed)
cell_prod_day %>%
ggplot(aes(x=Day, y=log(total_cell_prod))) +
geom_jitter() +
geom_smooth() +
theme_test()
cell_resp_rate <- cell_prod_day %>%
inner_join(resp_rate_mean, by=c("Inoculant", "Day"))
cell_resp_rate %>%
ggplot(aes(x=mgCO2_day, y=log(total_cell_prod))) +
geom_point() +
geom_smooth(method="lm") +
theme_test()
cor.test(cell_resp_rate$total_cell_prod, cell_resp_rate$mgCO2_day)
