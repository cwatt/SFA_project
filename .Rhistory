melt <- read_csv("../data_qPCR/SFA2_meltcurve_troubleshoot.csv") #%>%
melt
melt <- read_csv("../data_qPCR/SFA2_meltcurve_troubleshoot.csv") %>%
select(SampleID=Sample, melt_curve) %>%
mutate(melt_curve=case_when(melt_curve==0 ~ "normal",
melt_curve==1 ~ "intermediate",
melt_curve==2 ~ "high"))
head(melt)
reads <- inner_join(reads, melt)
reads
reads %>%
ggplot(aes(x=melt_curve, y=prop_reads)) +
geom_point() +
labs(y="Spike-in proportion of reads", x="Meltcurve temperature") +
theme_test()
reads %>%
ggplot(aes(x=melt_curve, y=prop_reads)) +
geom_jitter() +
labs(y="Spike-in proportion of reads", x="Meltcurve temperature") +
theme_test()
reads %>%
ggplot(aes(x=read_totals, y=prop_reads, color=Type)) +
geom_point() +
labs(y="Spike-in proportion of reads", y="Sample read depth") +
theme_test()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
rm(list=ls())
library(tidyverse)
library(ape)
sessionInfo()
# ASV counts
count <- read_tsv("../data_amplicon/SFA2rep1_trial/output/final/SFA2rep1trial.counts-final.tsv", skip=1, col_names=TRUE) %>%
rename(ASV=`#OTU ID`)
# Taxonomy table
tax <- read_tsv("../data_amplicon/SFA2rep1_trial/output/final/SFA2rep1trial.taxonomy-final.tsv")
# Sample metadata
meta <- read_tsv("../data_amplicon/SFA2rep1_trial/SFA2rep1_metadata.tsv")
# Calculate total reads per sample
read_totals <- colSums(count[,-1]) #%>% as_tibble()
# Isolate Aquifex reads
count_tax <- full_join(count, tax)
count_aquifex <- filter(count_tax, Genus=="Aquifex")
# Spike-in read counts per sample
aquifex_totals <- count_aquifex %>%
select(-ASV, -Domain, -Phylum, -Class, -Order, -Family, -Genus, -Species) %>%
colSums() %>%
as_tibble
# Calculate % spike-in per sample
samples <- colnames(count[-1]) %>% as.double()
reads <- bind_cols(samples, read_totals, aquifex_totals) %>%
rename(SampleID=...1, total_reads=...2, aquifex_reads=value) %>%
mutate(prop_reads = aquifex_reads/total_reads) %>%
inner_join(meta)
min(reads$prop_reads)
max(reads$prop_reads)
mean(reads$prop_reads)
median(reads$prop_reads)
reads %>%
ggplot(aes(x=SampleID, y=prop_reads, color=Type)) +
geom_point() +
labs(y="Spike-in proportion of reads") +
theme_test()
reads %>%
ggplot(aes(x=Day, y=prop_reads, color=Type)) +
geom_point() +
labs(y="Spike-in proportion of reads") +
theme_test()
reads %>%
ggplot(aes(x=read_totals, y=prop_reads, color=Type)) +
geom_point() +
labs(y="Spike-in proportion of reads", y="Sample read depth") +
theme_test()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
rm(list=ls())
library(tidyverse)
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
rm(list=ls())
library(tidyverse)
sessionInfo()
# Create list of files in directory
files <- list.files(path="../data_picogreen/SFA2", full.names=TRUE, recursive=FALSE)
# Import DNA conc. data
dna <- tibble()
for (i in files) {
if (str_detect(i, c("tidy", ".txt")) & !str_detect(i, "redo")) { # select files tidied using picogreen_tidy.py
dat <- read_tsv(i) %>%
select(Sample, AdjConc) %>%
mutate(Sample = as.double(Sample))
dna <- bind_rows(dna, dat)
} else {
next
}
}
# Add metadata
meta <- read_csv("../metadata/SFA2_metadata.csv")
dna.meta <- full_join(dna, meta) %>%
arrange(Sample)
dna.meta %>%
mutate(Innoculant = as_factor(Innoculant)) %>%
ggplot(aes(x=Day, y=AdjConc)) +
geom_point(aes(color=Innoculant)) +
#facet_wrap(~Innoculant) +
labs(y="DNA conc. (ng/uL)") +
theme_test()
# Graph each innoculant separately with sample labels
for (x in as.character(unique(dna.meta$Innoculant))) {
p <- dna.meta %>%
filter(Innoculant == x) %>%
ggplot(aes(x=Day, y=AdjConc)) +
geom_point(alpha=0.5) +
geom_text(aes(label=Sample), size=3, hjust=0, vjust=0) +
labs(y="DNA conc. (ng/uL)", title=paste("Innoculant", x)) +
theme_test()
print(p)
}
hist(dna.meta$AdjConc, breaks=15)
# Import DNA conc. data
for (i in files) {
if (str_detect(i, c("tidy", "redos", ".txt"))) { # select files tidied using picogreen_tidy.py
dna.redo <- read_tsv(i) %>%
select(Sample, AdjConc) %>%
mutate(Sample = as.double(Sample)) %>%
add_column(Status = rep("redo", nrow(.)))
} else {
next
}
}
# Add metadata
redo.meta <- inner_join(dna.redo, meta) %>%
arrange(Sample)
# First pass DNA extractions
dna.meta <- add_column(dna.meta, Status = rep("original", nrow(dna.meta)))
# Add redos
dna.meta <- bind_rows(dna.meta, redo.meta)
redos <- c(163, 164, 165, 166, 218, 219, 220, 235, 236, 237, 252, 253, 269, 271, 275, 276, 277, 280, 281, 282, 287, 288, 310, 312, 325, 341)
dna.meta %>%
filter(Sample %in% redos) %>%
mutate(Sample = as.factor(Sample)) %>%
ggplot(aes(x=Sample, y=AdjConc)) +
geom_point(aes(color=Status)) +
labs() +
theme_test()
dna.meta %>%
filter(Sample %in% redos) %>%
mutate(Sample = as.factor(Sample)) %>%
ggplot(aes(y=AdjConc)) +
geom_boxplot(aes(color=Status)) +
labs() +
theme_test()
# Graph each innoculant over time
for (x in as.character(unique(dna.meta$Innoculant))) {
p <- dna.meta %>%
filter(!(Status == "original" & Sample %in% redos)) %>%
filter(Innoculant == x) %>%
ggplot(aes(x=Day, y=AdjConc)) +
geom_point(alpha=0.5) +
geom_text(aes(label=Sample), size=3, hjust=0, vjust=0) +
labs(y="DNA conc. (ng/uL)", title=paste("Innoculant", x)) +
theme_test()
print(p)
}
# Replace redos
dna.meta.sub <- filter(dna.meta, !(Status == "original" & Sample %in% redos))
# Average
dna.avg <- dna.meta.sub %>%
group_by(Innoculant, Day, DOC_pheno) %>%
summarize(dna_avg = mean(AdjConc), dna_sd = sd(AdjConc))
# Visualize
dna.avg %>%
mutate(Innoculant = as.factor(Innoculant)) %>%
filter(!Day == 30) %>%
ggplot(aes(x=Day, y=dna_avg)) +
geom_point(aes(color=Innoculant)) +
geom_line(aes(color=Innoculant)) +
geom_hline(yintercept=1, linetype=2) +
labs(y="Mean DNA conc. (ng/uL)") +
theme_test()
# log transform
dna.avg %>%
mutate(Innoculant = as.factor(Innoculant)) %>%
filter(!Day == 30) %>%
ggplot(aes(x=Day, y=log(dna_avg))) +
geom_point(aes(color=Innoculant)) +
geom_line(aes(color=Innoculant)) +
facet_wrap(~Innoculant) +
geom_vline(xintercept = 10, linetype = 2) +
labs(y="Log mean DNA conc. (ng/uL)") +
theme_test()
# separate by DOC phenotype
dna.avg %>%
mutate(Innoculant = as.factor(Innoculant)) %>%
filter(!Day == 30) %>%
ggplot(aes(x=Day, y=dna_avg)) +
geom_point(aes(color=Innoculant)) +
geom_line(aes(color=Innoculant)) +
facet_wrap(~DOC_pheno) +
geom_hline(yintercept=1, linetype=2) +
labs(title="Separared by DOC phenotype", y="Mean DNA conc. (ng/uL)") +
theme_test()
dna.avg %>%
mutate(Innoculant = as.factor(Innoculant)) %>%
filter(!Day == 30) %>%
ggplot(aes(x=Day, y=log(dna_avg))) +
geom_point(aes(color=Innoculant)) +
geom_line(aes(color=Innoculant)) +
facet_wrap(~DOC_pheno) +
labs(title="Separared by DOC phenotype", y="Log mean DNA conc. (ng/uL)") +
theme_test()
min(dna.avg$dna_avg)
max(dna.avg$dna_avg)
# min
dna.avg %>%
filter(dna_avg < 1) %>%
group_by() %>%
summarize(min(dna_avg))
# max
dna.avg %>%
filter(dna_avg < 1) %>%
group_by() %>%
summarize(max(dna_avg))
# min
dna.avg %>%
filter(dna_avg > 1) %>%
group_by() %>%
summarize(min(dna_avg))
# max
dna.avg %>%
filter(dna_avg > 1) %>%
group_by() %>%
summarize(max(dna_avg))
min(dna.meta.sub$AdjConc)
max(dna.meta.sub$AdjConc)
# min
dna.meta.sub %>%
filter(AdjConc < 1) %>%
group_by() %>%
summarize(min(AdjConc))
# max
dna.meta.sub %>%
filter(AdjConc < 1) %>%
group_by() %>%
summarize(max(AdjConc))
# min
dna.meta.sub %>%
filter(AdjConc > 1) %>%
group_by() %>%
summarize(min(AdjConc))
# max
dna.meta.sub %>%
filter(AdjConc > 1) %>%
group_by() %>%
summarize(max(AdjConc))
# label groups based on averaged dna concentration
dna.avg.groups <- mutate(dna.avg, spike_group = if_else(dna_avg < 1, "low", "high"))
# visualize
dna.avg.groups %>%
ggplot(aes(x=spike_group, y=dna_avg)) +
geom_boxplot() +
theme_test()
# Apply labels to unaveraged dataset
dna.meta.group <- dna.meta.sub %>%
full_join(dna.avg.groups) %>%
select(-dna_avg)
# visualize
dna.meta.group %>%
ggplot(aes(x=spike_group, y=AdjConc)) +
geom_boxplot() +
theme_test()
dna.meta.group %>%
group_by(spike_group) %>%
filter(Day > 0) %>%
summarize(dna_avg = mean(AdjConc), dna_median = median(AdjConc), dna_min = min(AdjConc), dna_max = max(AdjConc))
dna.meta.group %>%
ggplot(aes(x=Day, y=AdjConc)) +
geom_point(aes(color=spike_group)) +
facet_wrap(~Innoculant) +
theme_test()
for (x in as.character(unique(dna.meta.group$Innoculant))) {
p <- dna.meta.group %>%
filter(!(Status == "original" & Sample %in% redos)) %>%
filter(Innoculant == x) %>%
ggplot(aes(x=Day, y=AdjConc, color=spike_group)) +
geom_point(alpha=0.5) +
geom_hline(yintercept = 1) +
geom_text(aes(label=Sample), size=3, hjust=0, vjust=0) +
labs(y="DNA conc. (ng/uL)", title=paste("Innoculant", x)) +
theme_test()
print(p)
}
# label borderline samples
dna.meta.group <- mutate(dna.meta.group, borders = case_when(spike_group=="low" & AdjConc <= 1 ~ "low",
spike_group=="high" & AdjConc >= 1 ~ "high",
spike_group=="low" & AdjConc >= 1 ~ "both",
spike_group=="high" & AdjConc <= 1 ~ "both"))
# Number of samples in each spike group
dna.meta.group %>%
group_by(borders) %>%
summarize(count(.))
# Calculate dilutions for each sample
dna.meta.sub <- dna.meta.sub %>%
mutate(conc_goal = if_else(AdjConc <= 1, AdjConc, 1),
template_uL = round((conc_goal*20)/AdjConc, 0), # C1V1=C2V2, rounded to nearest whole uL
mgH2O_uL = 20-template_uL) %>%
arrange(Sample)
head(dna.meta.sub)
dna_mean <- dna.meta.sub %>% filter(Day != 0) %>% mean(AdjConc)
dna_mean
?mean
dna_mean <- dna.meta.sub %>% filter(Day != 0) %>% mean(AdjConc, na.rm=TRUE)
dna_mean
dna.meta.sub$AdjConc
dna.meta.sub %>%
ggplot(aes(x=Sample, y=AdjConc)) +
geom_point() +
theme_test()
?geom_text
dna.meta.sub %>%
ggplot(aes(x=Sample, y=AdjConc)) +
geom_point() +
geom_text(aes(label=Sample))
dna.meta.sub %>%
ggplot(aes(x=Sample, y=AdjConc)) +
geom_point() +
geom_text(aes(label=Sample)) +
theme_test()
dna.meta.sub %>%
ggplot(aes(x=Sample, y=AdjConc)) +
geom_point() +
geom_text(aes(label=Sample), vjust="inward") +
theme_test()
dna.meta.sub %>%
ggplot(aes(x=Sample, y=AdjConc)) +
geom_point() +
geom_text(aes(label=Sample), vjust="outward") +
theme_test()
outliers <- c(338, 290, 327, 363, 272, 303)
dna_mean <- dna.meta.sub %>% filter(Day != 0, !(Sample %in% outliers))
dna_mean <- dna.meta.sub %>% filter(Day != 0, !(Sample %in% outliers))
dna_mean <- dna.meta.sub %>% filter(Day != 0, !(Sample %in% outliers)) %>% head()
x <- dna.meta.sub %>% filter(Day != 0, !(Sample %in% outliers)) %>% head()
x
dim(x)
x <- dna.meta.sub %>%
filter(Day != 0, Sample !%in% outliers)
x <- dna.meta.sub %>%
filter(Day != 0, !(Sample %in% outliers))
head(x)
dim(x)
dim(dna.meta.sub)
x <- dna.meta.sub %>%
filter(Day != 0, !(Sample %in% outliers)) %>%
group_by() %>%
summarize(mean = mean(AdjConc, na.rm=TRUE))
x
dna_mean <- dna.meta.sub %>%
filter(Day != 0, !(Sample %in% outliers)) %>%
group_by() %>%
summarize(mean = mean(AdjConc, na.rm=TRUE))
day0_mean <- dna.meta.sub %>%
filter(Day==0) %>%
group_by() %>%
summarize(mean = mean(AdjConc, na.rm=TRUE))
day0_mean
dna_mean - day0_mean
# Subtract day 0 mean from sample average
# This number will be used to calculate new spike-in
sample_mean <- dna_mean - day0_mean
sample_mean
total_dna_mean <- actual_dna_mean*15
# Find outliers:
dna.meta.sub %>%
ggplot(aes(x=Sample, y=AdjConc)) +
geom_point() +
geom_text(aes(label=Sample), vjust="outward") +
theme_test()
outliers <- c(338, 290, 327, 363, 272, 303)
# Sample dna mean excluding day 0 (mostly plant DNA) and high outliers
sample_dna_mean <- dna.meta.sub %>%
filter(Day != 0, !(Sample %in% outliers)) %>%
group_by() %>%
summarize(mean = mean(AdjConc, na.rm=TRUE))
sample_dna_mean
# Day 0 mean
day0_mean <- dna.meta.sub %>%
filter(Day==0) %>%
group_by() %>%
summarize(mean = mean(AdjConc, na.rm=TRUE))
day0_dna_mean
# Find outliers:
dna.meta.sub %>%
ggplot(aes(x=Sample, y=AdjConc)) +
geom_point() +
geom_text(aes(label=Sample), vjust="outward") +
theme_test()
outliers <- c(338, 290, 327, 363, 272, 303)
# Sample dna mean excluding day 0 (mostly plant DNA) and high outliers
sample_dna_mean <- dna.meta.sub %>%
filter(Day != 0, !(Sample %in% outliers)) %>%
group_by() %>%
summarize(mean = mean(AdjConc, na.rm=TRUE))
sample_dna_mean
# Day 0 mean
day0_dna_mean <- dna.meta.sub %>%
filter(Day==0) %>%
group_by() %>%
summarize(mean = mean(AdjConc, na.rm=TRUE))
day0_dna_mean
# Subtract day 0 mean from sample average
# This number will be used to calculate new spike-in
actual_dna_mean <- sample_dna_mean - day0_mean
actual_dna_mean
total_dna_mean <- sample_dna_mean*15
total_dna_mean
total_dna_mean*0.00001
total_dna_mean*0.000001
total_dna_mean <- sample_dna_mean*15*1000 # 15 uL, convert from ng to pg
total_dna_mean
total_dna_mean*0.000001
total_spike_pg <- total_dna_mean*0.000001
total_spike_pg
total_spike_pg
# Spike concentration to make
total_spike_pg/5
# Total volume of spike needed for all samples (8 uL to account for liquid loss during pipetting)
spike_vol_total <- 8*384
# Total volume of spike needed for all samples (8 uL to account for liquid loss during pipetting)
vol_total <- 8*384
# Volume needed to dilute spike from 0.1 pg/uL
spike_vol <- (vol_total*spike_conc)/0.1
# Spike concentration to make (plan to add 5 uL to each sample)
spike_conc <- total_spike_pg/5
# Volume needed to dilute spike from 0.1 pg/uL
spike_vol <- (vol_total*spike_conc)/0.1
spike_vol
water_vol <- vol_total - spike_vol
water_vol
spike_vol/3
water_vol/3
# Prepare spike-in separately for each replicate of experiment
spike_vol/3
water_vol/3
View(dna.meta.sub)
spike_conc
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
rm(list=ls())
library(tidyverse)
library(ape)
sessionInfo()
# ASV counts
count <- read_tsv("../data_amplicon/SFA2rep1_trial/output/final/SFA2rep1trial.counts-final.tsv", skip=1, col_names=TRUE) %>%
rename(ASV=`#OTU ID`)
# Taxonomy table
tax <- read_tsv("../data_amplicon/SFA2rep1_trial/output/final/SFA2rep1trial.taxonomy-final.tsv")
# Sample metadata
meta <- read_tsv("../data_amplicon/SFA2rep1_trial/SFA2rep1_metadata.tsv")
# Calculate total reads per sample
read_totals <- colSums(count[,-1]) #%>% as_tibble()
# Isolate Aquifex reads
count_tax <- full_join(count, tax)
count_aquifex <- filter(count_tax, Genus=="Aquifex")
# Spike-in read counts per sample
aquifex_totals <- count_aquifex %>%
select(-ASV, -Domain, -Phylum, -Class, -Order, -Family, -Genus, -Species) %>%
colSums() %>%
as_tibble
# Calculate % spike-in per sample
samples <- colnames(count[-1]) %>% as.double()
reads <- bind_cols(samples, read_totals, aquifex_totals) %>%
rename(SampleID=...1, total_reads=...2, aquifex_reads=value) %>%
mutate(prop_reads = aquifex_reads/total_reads) %>%
inner_join(meta)
min(reads$prop_reads)
max(reads$prop_reads)
mean(reads$prop_reads)
median(reads$prop_reads)
reads %>%
ggplot(aes(x=SampleID, y=prop_reads, color=Type)) +
geom_point() +
labs(y="Spike-in proportion of reads") +
theme_test()
reads %>%
ggplot(aes(x=Day, y=prop_reads, color=Type)) +
geom_point() +
labs(y="Spike-in proportion of reads") +
theme_test()
reads %>%
ggplot(aes(x=read_totals, y=prop_reads, color=Type)) +
geom_point() +
labs(y="Spike-in proportion of reads", y="Sample read depth") +
theme_test()
dna <- read_csv("../data_picogreen/SFA2_dnaspikes.csv") %>%
select(SampleID=Sample, dna_conc=AdjConc, spike_group)
reads <- inner_join(reads, dna) %>%
mutate(spike_added_pg = if_else(spike_group=="low", 0.0341, 0.1707),
total_dna_pg = dna_conc*15*1000, # dna_conc is ng/uL, 15 uL of sample total
prop_dna = spike_added_pg/(total_dna_pg+spike_added_pg)) # double check
reads %>%
ggplot(aes(x=prop_dna, y=prop_reads)) +
geom_point(aes(color=Type)) +
#geom_hline(yintercept=0.01, linetype=2) +
#geom_hline(yintercept=0.1, linetype=2) +
labs(y="Spike-in proportion of reads", x="Spike-in proportion of total DNA") +
theme_test()
