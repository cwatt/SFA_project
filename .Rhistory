geom_smooth(method='lm')
ggplot(ints.summary, aes(seconds_avg, prop_drift, colour = analys_type, fill = analys_type)) +
geom_point() +
labs(x = "Time (min)", y = "Proportion of Original Value") +
ggtitle("Check Standard Drift - Proportional Basis") +
theme_bw() + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_smooth(method='lm')
# NPOC drift regression
drift.fix = lm(prop_drift ~ seconds_avg, data=ints.summary)
drift.fix = tidy(drift.fix)
drift.fix = as.data.frame(drift.fix)
# Re-calculate sample concentrations based on std curve
samples <- samples %>%
mutate(Corr.Conc.=(Area-cal.NPOC[1,2])/(cal.NPOC[2,2]))
# Convert date/time to POSIXct
samples$date_time_new = as.POSIXct(samples$date_time, format="%m/%d/%Y %H:%M")
# Create time elapsed since first internal check
samples = samples %>%
mutate(time_elapsed = round(date_time_new - t1[1,1], 2)) %>% # time elapsed since first internal check
mutate(time_elapsed = as.numeric(time_elapsed*3600)) # convert to seconds to match drift calibration
# NPOC drift correction
samples = mutate(samples, drift.Conc = Corr.Conc./(time_elapsed*drift.fix[2,2]+drift.fix[1,2]))
# Correct for hand-dilution (not dilutions done by Shimadzu, which are already accounted for)
samples.final <- samples %>% mutate(doc = drift.Conc*dil)
# Remove blanks from data (no longer needed)
samples.final <- samples.final[!samples.final$sample_type=="Blank",]
# Average injections for same sample
samples.final.avg <- samples.final %>%
group_by(sample_id) %>%
summarize(mean = mean(doc))
head(samples.final.avg)
saveRDS(samples.final.avg, "data_DOC/SFA2/SFA2_doc.rds")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
rm(list=ls())
library(tidyverse)
require(broom)
library(reshape2)
library(qqplotr)
library(car)
# Import data
doc = readRDS("data_DOC/SFA2/SFA2_doc.rds") %>%
mutate(sample_id = as.numeric(sample_id)) %>%
select(sample_id, "doc"=mean)
head(doc)
# Import metadata
meta = read.csv("data_DOC/SFA2/SFA2_doc_metadata.csv")
# Merge
doc.meta = full_join(meta, doc, by=c("Sample" = "sample_id")) %>%
merge(meta, doc, by.y="sample_id", by.x="ucosm", all=TRUE)
# Merge
doc.meta = full_join(meta, doc, by=c("Sample" = "sample_id"))
head(doc.meta)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
rm(list=ls())
library(tidyverse)
require(broom)
library(reshape2)
library(qqplotr)
library(car)
doc = readRDS("data_DOC/SFA2/SFA2_doc.rds") %>%
mutate(sample_id = as.numeric(sample_id)) %>%
select(sample_id, "doc"=mean)
# Import metadata
meta = read.csv("data_DOC/SFA2/SFA2_doc_metadata.csv")
# Merge
doc.meta = full_join(meta, doc, by=c("Sample" = "sample_id"))
head(doc.meta)
ggplot(doc.meta, aes(x=as.factor(Sample), y=doc, color=DOC_pheno)) +
geom_point() +
theme_test() +
labs(x="Sample", y="DOC conc.")
ggplot(doc.meta, aes(x=as.factor(Innoculant), y=doc, color=DOC_pheno)) +
geom_point() +
theme_test() +
labs(x="Sample", y="DOC conc.")
ggplot(doc.meta, aes(x=as.factor(Innoculant), y=doc, color=DOC_pheno)) +
geom_point() +
facet_wrap(~Group) +
theme_test() +
labs(x="Sample", y="DOC conc.")
ggplot(doc.meta, aes(x=DOC_pheno, y=doc)) +
geom_point() +
facet_wrap(~Group) +
theme_test() +
labs(x="Sample", y="DOC conc.")
ggplot(doc.meta, aes(x=DOC_pheno, y=doc, color=Sample)) +
geom_point() +
facet_wrap(~Group) +
theme_test() +
labs(x="Sample", y="DOC conc.")
head(doc.meta)
headspace.doc = filter(doc.meta, DOC_pheno=="Headspace")
head.doc.lm = lm(doc.metadoc ~ DOC_pheno, data = headspace.doc)
head.doc.lm = lm(doc ~ DOC_pheno, data = headspace.doc)
headspace.doc
headspace.doc = filter(doc.meta, Group=="Headspace")
headspace.doc
headspace.doc = filter(doc.meta, Group=="Headspace" & Type=="Sample")
headspace.doc
library(lmerTest)
?lmer
head.doc.lmer = lmer(doc ~ DOC_pheno + (1|Sample), data = headspace.doc) # linear mixed effects model, allow sample to vary independently
heaad(headspace.doc)
head(headspace.doc)
head.doc.lmer = lmer(doc ~ DOC_pheno + (1|Innoculant), data = headspace.doc) # linear mixed effects model, allow innoculant to vary independently
hist(residuals(head.doc.lmer))
plot(residuals(head.doc.lmer), predict(head.doc.lmer))
summary(head.doc.lmer)
Growth.doc = filter(doc.meta, Group=="Growth" & Type=="Sample")
growth.doc = filter(doc.meta, Group=="Growth" & Type=="Sample")
grow.doc.lmer = lmer(doc ~ DOC_pheno + (1|Innoculant), data = growth.doc) # linear mixed effects model, allow innoculant to vary independently
hist(residuals(head.doc.lmer))
hist(residuals(grow.doc.lmer))
grow.doc.lmer2 = lmer(log(doc) ~ DOC_pheno + (1|Innoculant), data = growth.doc) # linear mixed effects model, allow innoculant to vary independently
hist(residuals(grow.doc.lmer2))
plot(residuals(head.doc.lmer), predict(head.doc.lmer2))
plot(residuals(head.doc.lmer2), predict(head.doc.lmer2))
plot(residuals(grow.doc.lmer2), predict(grow.doc.lmer2))
hist(residuals(grow.doc.lmer))
hist(residuals(grow.doc.lmer2))
hist(residuals(grow.doc.lmer))
plot(residuals(grow.doc.lmer), predict(grow.doc.lmer))
grow.doc.lmer = lmer(log(doc) ~ DOC_pheno + (1|Innoculant), data = growth.doc) # linear mixed effects model, allow innoculant to vary independently
hist(residuals(grow.doc.lmer))
plot(residuals(grow.doc.lmer), predict(grow.doc.lmer))
summary(head.doc.lmer)
ggplot(doc.meta, aes(x=DOC_pheno, y=doc)) +
geom_boxplot() +
facet_wrap(~Group) +
theme_test() +
labs(x="Sample", y="DOC conc.")
headspace.doc = filter(doc.meta, Group=="Headspace" & Type=="Sample")
head.doc.lmer = lmer(doc ~ DOC_pheno, data = headspace.doc) # linear mixed effects model, allow innoculant to vary independently
headspace.doc = filter(doc.meta, Group=="Headspace" & Type=="Sample")
head.doc.lmer = lm(doc ~ DOC_pheno, data = headspace.doc) # linear mixed effects model, allow innoculant to vary independently
hist(residuals(head.doc.lmer))
plot(residuals(head.doc.lmer), predict(head.doc.lmer))
summary(head.doc.lmer)
headspace.doc = filter(doc.meta, Group=="Headspace" & Type=="Sample")
head.doc.lmer = lmer(doc ~ DOC_pheno + (1|Innoculant), data = headspace.doc) # linear mixed effects model, allow innoculant to vary independently
hist(residuals(head.doc.lmer))
plot(residuals(head.doc.lmer), predict(head.doc.lmer))
summary(head.doc.lmer)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
rm(list=ls())
library(tidyverse)
require(broom)
library(lmerTest)
# Import data
doc = readRDS("data_DOC/SFA2/SFA2_doc.rds") %>%
mutate(sample_id = as.numeric(sample_id)) %>%
select(sample_id, "doc"=mean)
# Import metadata
meta = read.csv("data_DOC/SFA2/SFA2_doc_metadata.csv")
# Merge
doc.meta = full_join(meta, doc, by=c("Sample" = "sample_id"))
# Sample means
ggplot(doc.meta, aes(x=as.factor(Innoculant), y=doc, color=DOC_pheno)) +
geom_point() +
facet_wrap(~Group) +
theme_test() +
labs(x="Sample", y="DOC conc.")
ggplot(doc.meta, aes(x=DOC_pheno, y=doc)) +
geom_boxplot() +
facet_wrap(~Group) +
theme_test() +
labs(x="Sample", y="DOC conc.")
headspace.doc = filter(doc.meta, Group=="Headspace" & Type=="Sample")
head.doc.lmer = lmer(doc ~ DOC_pheno + (1|Innoculant), data = headspace.doc) # linear mixed effects model, allow innoculant to vary independently
hist(residuals(head.doc.lmer))
plot(residuals(head.doc.lmer), predict(head.doc.lmer))
summary(head.doc.lmer)
growth.doc = filter(doc.meta, Group=="Growth" & Type=="Sample")
grow.doc.lmer = lmer(log(doc) ~ DOC_pheno + (1|Innoculant), data = growth.doc) # linear mixed effects model, allow innoculant to vary independently
hist(residuals(grow.doc.lmer))
plot(residuals(grow.doc.lmer), predict(grow.doc.lmer))
summary(head.doc.lmer)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(tidyverse)
library(cowplot)
sessionInfo()
rm(list=ls())
# List of directories containing data files
dir = list.dirs(path="data_CO2/SFA2/data", full.names=TRUE, recursive=FALSE)
# Create lists of .txt files from directories
files = list()
for (i in dir) {
files[[i]] <- list.files(path=i, pattern="*.txt", full.names=TRUE, recursive=FALSE)
}
# Extract area data
# TIC, w/z44 (12C), w/z45 (13C)
# Construct data frame containing all data
area.df = tibble() # initialize empty tibble
for (i in names(files)) { # for each list of files (refers to a directory)
for (x in files[[i]]) { # for each file in the selected list (directory)
# Create sample names based on file names
# Strips the rest of the path from the sample name at the end
name = str_remove(x, "data_CO2/SFA2/data/.+/") %>%
str_remove(".txt")
#name.list[[i]] = append(name.list[[i]], name)
# Isolate time point info
date = str_remove(x, "data_CO2/SFA2/data/") %>%
str_remove("/.+.txt") %>%
str_remove(".+_")
tp = str_remove(x, "data_CO2/SFA2/data/") %>%
str_remove("/.+.txt") %>%
str_remove("_.+")
# Isolate the area data and clean up
dat = read_tsv(x, skip=7, col_names=TRUE) %>%
select("Measurement" = Name, Area) %>% # keep only the name of sample and the area measurements collected
drop_na() %>%
mutate(Measurement = case_when(Measurement == "TIC" ~ "Ctotal", # more explicit measurement labels
Measurement == "m/z 44" ~ "C12",
Measurement == "m/z 45" ~ "C13"),
TP = tp, # adding additional metadata...
Date = date,
Sample = name)
area.df = rbind(area.df, dat) # add to master data frame
}
}
# Parse dates
area.df = area.df %>%
mutate(Date = gsub("([0-2]{2})([0-9]{2})([0-2]{2})", "\\1-\\2-20\\3", Date)) %>%
mutate(Date = parse_date(Date, "%m-%d-%Y"))
# Calculate
area.df = area.df %>%
pivot_wider(names_from = Measurement, values_from = Area) %>%
mutate(C1213 = C12+C13)
std.df = area.df %>%
filter(str_detect(Sample, "std"))
# Calculate adjusted areas
std.df = std.df %>%
mutate(Area.adj = if_else(str_detect(Sample, "[7-9]"), C1213*1.8, C1213, missing=NULL), # correct split-ratio
ppm = case_when(Sample == "std0" ~ 0, # add ppm
Sample == "std1" ~ 769,
Sample == "std2" ~ 1538,
Sample == "std3" ~ 3077,
Sample == "std4" ~ 7692,
Sample == "std5" ~ 15385,
Sample == "std6" ~ 30769,
Sample == "std7" ~ 76923,
Sample == "std7.5" ~ 153856,
Sample == "std8" ~ 230769,
Sample == "std8.5" ~ 307692,
Sample == "std9" ~ 384615))
std.df %>%
ggplot(aes(x=ppm, y=Area.adj)) +
geom_point() +
geom_smooth(method="lm") +
facet_wrap(~Date, scales="free") +
theme_test()
# Linear regressions
std.cal = tibble()
for (x in unique(std.df$Date)) {
dat = filter(std.df, Date==x)
std.lm = lm(Area.adj ~ ppm, dat)
this.row = bind_cols(Date = unique(dat$Date), # save results
intercept = summary(std.lm)$coefficients[1,1],
slope = summary(std.lm)$coefficients[2,1],
adjR2 = summary(std.lm)$adj.r.squared,
pval = summary(std.lm)$coefficients[2,4])
std.cal = bind_rows(std.cal, this.row)
}
std.cal
std.df %>%
filter(Sample != "std1") %>%
ggplot(aes(x=ppm, y=Area.adj)) +
geom_point() +
geom_smooth(method="lm") +
facet_wrap(~Date, scales="free") +
theme_test()
# Linear regressions
std.cal1 = tibble()
for (x in unique(std.df$Date)) {
dat1 = filter(std.df, Date==x & Sample != "std1")
std.lm1 = lm(Area.adj ~ ppm, dat)
date1 = unique(dat1$Date)
this.row1 = bind_cols(Date = date, coeff = summary(std.lm1)$coefficients[2,1], adjR2 = summary(std.lm1)$adj.r.squared , pval = summary(std.lm1)$coefficients[2,4]) # save coefficent, adj. R2, and p-value
std.cal1 = bind_rows(std.cal, this.row)
}
std.cal1
std.df %>%
filter(!(Sample %in% c("std1", "std4"))) %>%
ggplot(aes(x=ppm, y=Area.adj)) +
geom_point() +
geom_smooth(method="lm") +
facet_wrap(~Date, scales="free") +
theme_test()
# Linear regressions
std.cal14 = tibble()
for (x in unique(std.df$Date)) {
dat14 = filter(std.df, Date==x & Sample != "std1")
std.lm14 = lm(Area.adj ~ ppm, dat14)
this.row14 = bind_cols(coeff = summary(std.lm14)$coefficients[2,1], adjR2 = summary(std.lm14)$adj.r.squared , pval = summary(std.lm14)$coefficients[2,4]) # save coefficent, adj. R2, and p-value
std.cal14 = bind_rows(std.cal14, this.row14)
}
std.cal14
sample.df = anti_join(area.df, std.df) %>%
mutate(dummy_ppm = 0) %>% # dummy ppm for graphing with standards on ppm axis
filter(!str_detect(Sample, "[a-z]")) %>% # exclude other non-samples
mutate(Sample, Sample = parse_number(Sample))# convert to numeric
# Import metadata
meta = read_csv("SFA2_headspace_metadata.csv")
# Merge with CO2 data
sample.df = full_join(sample.df, meta, by="Sample")
# Compare samples against range of standards
std.df %>%
ggplot(aes(x=ppm, y=Area.adj)) +
geom_point(shape=1) +
geom_point(aes(y=C1213, x=dummy_ppm, color=Date), data=sample.df) +
labs(title="Samples vs. standards") +
theme_test()
# Observe progression of CO2 production
sample.df %>%
mutate(Control = if_else(Sample %in% c(379:384), "Y", "N")) %>% # distinguish negative control
ggplot(aes(y=C1213, x=Date)) +
labs(y="Area") +
geom_jitter(aes(color = Control)) +
labs(title="Quick look - respiration over time") +
theme_test()
# Isolate outlier and correct
outlier = sample.df %>%
subset(Sample==363 & TP=="tp6") %>%
mutate(Ctotal = Ctotal/2, C12 = C12/2, C13 = C13/2, C1213 = C1213/2) # halve measurements
# Replace in dataframe
sample.df = sample.df %>%
filter(!(Sample==363 & TP=="tp6")) %>%
bind_rows(outlier)
# Convert sample area to ppm using calibration curves
sample.conv = tibble()
for (d in unique(sample.df$Date)) {
cal = std.cal %>% filter(Date==d)
conv = sample.df %>%
filter(Date==d) %>%
mutate(ppm = (C1213 - cal$intercept)/cal$slope)
sample.conv = rbind(sample.conv, conv)
}
# Sanity check, plot against standards
std.df %>%
ggplot(aes(x=ppm, y=Area.adj)) +
geom_point(shape=1) +
geom_point(aes(y=C1213, x=ppm, color=Date), data=sample.conv) +
#scale_y_continuous(limits=c(0,500000)) +
#scale_x_continuous(limits=c(0, 20000)) +
theme_test() +
theme()
# Ideal gas law: n=(P*V)/(R*temp)
# NOTE: pressure does not matter for this calulation because it's all relative to the stds
R = 0.082057338 # universal gas constant, (L*atm)/(mol*K)
temp = 296.48 # K, 74F in lab throughout experiment
V = 0.013 # L, headspace of 30 mL serum bottle with sand ########### NEED TO DBL CHECK##########
mwCO2 = 44.01 # molecular weight (g/mol) of CO2
P = 1 #atm, assumes 1 atm in ucosms during sampling
# Calculate per time point
molCO2100 = P*V/(R*temp) # total mol of CO2 in headspace, if it were 100% CO2
mgCO2100 = molCO2100 * mwCO2*1000 # mol * g/mol * 1000mg/g = mg, mg of CO2 present if it were 100% CO2
sample.conv = mutate(sample.conv, mgCO2 = mgCO2100*(ppm*10^-6)) # actual mg CO2 based on ppm
# Cumulative mg CO2 and C
sample.totals = sample.conv %>%
group_by(Sample, Innoculant, DOC_predict) %>%
summarize(totalCO2mg = sum(mgCO2), totalCmg = totalCO2mg*(12/44))
sample.totals %>%
ggplot(aes(x=Innoculant, y=totalCO2mg, color=DOC_predict)) +
geom_point() +
labs(title="Cumulative CO2 respiration", y="CO2 mg", x="Innoculant") +
theme_test()
sample.totals %>%
ggplot(aes(x=DOC_predict, y=totalCO2mg)) +
geom_point() +
labs(title="Cumulative CO2 respiration", y="CO2 mg", x="DOC predicted") +
theme_test()
saveRDS(sample.totals, file="data_CO2/SFA2/SFA2_CO2.rds")
# Import CO2 data
co2 = readRDS("data_CO2/SFA2/SFA2_CO2.rds")
co2
head(doc)
head(head.doc)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
rm(list=ls())
library(tidyverse)
require(broom)
library(lmerTest)
# Import data
doc = readRDS("data_DOC/SFA2/SFA2_doc.rds") %>%
mutate(sample_id = as.numeric(sample_id)) %>%
select(sample_id, "doc"=mean)
# Import metadata
meta = read.csv("data_DOC/SFA2/SFA2_doc_metadata.csv")
# Merge
doc.meta = full_join(meta, doc, by=c("Sample" = "sample_id"))
# Sample means
ggplot(doc.meta, aes(x=as.factor(Innoculant), y=doc, color=DOC_pheno)) +
geom_point() +
facet_wrap(~Group) +
theme_test() +
labs(x="Sample", y="DOC conc.")
ggplot(doc.meta, aes(x=DOC_pheno, y=doc)) +
geom_boxplot() +
facet_wrap(~Group) +
theme_test() +
labs(x="Sample", y="DOC conc.")
headspace.doc = filter(doc.meta, Group=="Headspace" & Type=="Sample")
head.doc.lmer = lmer(doc ~ DOC_pheno + (1|Innoculant), data = headspace.doc) # linear mixed effects model, allow innoculant to vary independently
hist(residuals(head.doc.lmer))
plot(residuals(head.doc.lmer), predict(head.doc.lmer))
summary(head.doc.lmer)
growth.doc = filter(doc.meta, Group=="Growth" & Type=="Sample")
grow.doc.lmer = lmer(log(doc) ~ DOC_pheno + (1|Innoculant), data = growth.doc) # linear mixed effects model, allow innoculant to vary independently
hist(residuals(grow.doc.lmer))
plot(residuals(grow.doc.lmer), predict(grow.doc.lmer))
summary(head.doc.lmer)
head(head.doc)
head(headspace.doc)
head(co2)
# Import CO2 data
co2 = readRDS("data_CO2/SFA2/SFA2_CO2.rds")
head(co2)
# Import CO2 data
co2 = readRDS("data_CO2/SFA2/SFA2_CO2.rds") %>%
rename(DOC_pheno = DOC_predict)
co2
doc.co2 = full_join(doc, co2, by=c("Sample", "Innoculant", "DOC_pheno"))
head(headspace.doc)
doc.co2 = full_join(headspace.doc, co2, by=c("Sample", "Innoculant", "DOC_pheno"))
doc.co2
doc.co2 %>%
ggplot(aes(x=doc, y=totalCO2mg, color=DOC_pheno)) +
geom_point() +
theme_test()
doc.co2 %>%
filter(DOC_pheno != NA) %>%
ggplot(aes(x=doc, y=totalCO2mg, color=DOC_pheno)) +
geom_point() +
theme_test()
doc.co2 %>%
filter(DOC_pheno == "NA") %>%
ggplot(aes(x=doc, y=totalCO2mg, color=DOC_pheno)) +
geom_point() +
theme_test()
doc.co2 %>%
filter(DOC_pheno != "NA") %>%
ggplot(aes(x=doc, y=totalCO2mg, color=DOC_pheno)) +
geom_point() +
theme_test()
doc.co2 %>%
filter(DOC_pheno != "NA") %>%
ggplot(aes(x=doc, y=totalCO2mg, color=DOC_pheno)) +
geom_point() +
geom_smooth(method="lm")
doc.co2 %>%
filter(DOC_pheno != "NA") %>%
ggplot(aes(x=doc, y=totalCO2mg, color=DOC_pheno)) +
geom_point() +
geom_smooth(method="lm") +
theme_test()
doc.co2 %>%
filter(DOC_pheno != "NA") %>%
ggplot(aes(x=doc, y=totalCO2mg)) +
geom_point(aes(color=DOC_pheno)) +
geom_smooth(method="lm") +
theme_test()
# Import protein metadata
prot = read.csv("~/SFAgrowthrate/protein_extractions/SFA1_washprotein_metadata.csv")
head(prot)
# Import protein metadata
prot = read_csv("~/SFAgrowthrate/protein_extractions/SFA1_washprotein_metadata.csv")
prot
?inner_jion
?inner_join
doc.prot = left_join(doc, prot, by=c("Innoculant"="Sample"))
doc.prot = left_join(headspace.doc, prot, by=c("Innoculant"="Sample"))
head(docdoc.prot)
head(doc.prot)
doc.prot %>%
gplot(aes(x=Volume, y=doc)) +
geom_point() +
theme_test()
doc.prot %>%
ggplot(aes(x=Volume, y=doc)) +
geom_point() +
theme_test()
doc.prot %>%
ggplot(aes(x=Volume, y=doc)) +
geom_point() +
geom_smooth() +
theme_test()
doc.prot %>%
ggplot(aes(x=Volume, y=doc)) +
geom_point() +
geom_smooth(method="lm") +
theme_test()
doc.prot %>%
ggplot(aes(x=Volume, y=doc)) +
geom_point() +
theme_test()
doc.prot %>%
ggplot(aes(x=Volume, y=doc)) +
geom_point() +
geom_smooth() +
theme_test()
doc.prot %>%
ggplot(aes(x=Volume, y=doc)) +
geom_point() +
geom_smooth(method="lm") +
theme_test()
