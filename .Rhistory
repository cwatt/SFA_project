bNTI_contrasts_inoc41_whole <- arrange(bNTI_contrasts_inoc41_whole, Day) %>%
mutate(community = "whole")
bNTI_contrasts_inoc41_whole %>%
ggplot(aes(x=Day, y=bNTI_mean)) +
geom_point() +
geom_line() +
geom_hline(yintercept = c(2, -2), linetype=2) +
geom_hline(yintercept = 0) +
theme_test()
# Inoculant 12 only
meta_inoc12 <- meta %>%
filter(Inoculant==12 & Type=="Growth") %>%
select(SampleID, Sample, Inoculant, Day)
count_inoc12 <- select(count, as.character(meta_inoc12$SampleID))
matched_inoc12_whole <- match.phylo.data(tree, count_inoc12)
# Calculate empirical betaMNTD
bMNTD_inoc12_whole <-  as.matrix(comdistnt(t(matched_inoc12_whole$data), cophenetic(matched_inoc12_whole$phy), abundance.weighted=T))
# Double check data compatibility, both should be TRUE
identical(colnames(matched_inoc12_whole$data), colnames(bMNTD_inoc12_whole))
identical(colnames(matched_inoc12_whole$data), rownames(bMNTD_inoc12_whole))
# Calculate randomized betaMNTD (999 randomizations)
reps <- 999
rand_bMNTD_inoc12_whole <- array(c(-999), dim=c(ncol(matched_inoc12_whole$data), ncol(matched_inoc12_whole$data), reps))
dim(rand_bMNTD_inoc12_whole)
for (rep in 1:reps) {
rand_bMNTD_inoc12_whole[,,rep] = as.matrix(comdistnt(t(matched_inoc12_whole$data), taxaShuffle(cophenetic(matched_inoc12_whole$phy)), abundance.weighted=T, exclude.conspecifics=F))
print(c(date(), rep))
}
# Calculate betaNTI
bNTI_inoc12_whole = matrix(c(NA), nrow=ncol(matched_inoc12_whole$data), ncol=ncol(matched_inoc12_whole$data)) # create empty matrix of same size
dim(bNTI_inoc12_whole)
for (column in 1:(ncol(matched_inoc12_whole$data) - 1)) {
for (row in (column + 1):ncol(matched_inoc12_whole$data)) {
rand_vals = rand_bMNTD_inoc12_whole[row, column,]
bNTI_inoc12_whole[row, column] = (bMNTD_inoc12_whole[row, column] - mean(rand_vals)) / sd(rand_vals)
#rm("rand_vals")
}
}
rownames(bNTI_inoc12_whole) = colnames(matched_inoc12_whole$data);
colnames(bNTI_inoc12_whole) = colnames(matched_inoc12_whole$data);
# Visualize
hist(bNTI_inoc12_whole)
# Save output
saveRDS(bNTI_inoc12_whole, file="../data_intermediate/SFA2_bNTI_inoc12_whole.rds")
saveRDS(rand_bMNTD_inoc12_whole, file="../data_intermediate/SFA2_bMNTD_rand_inoc12_whole.rds")
# Load calculations
# whole community bNTI
bNTI_inoc12_whole <- readRDS("../data_intermediate/SFA2_bNTI_inoc12_whole.rds") %>%
as.data.frame()
# whole community permuted bMNTD
rand_bMNTD_inoc12_whole <- readRDS("../data_intermediate/SFA2_bMNTD_rand_inoc12_whole.rds")
bNTI_contrasts_inoc12_whole <- data.frame()
for (day in unique(meta_inoc12$Day)) {
meta_subset <- filter(meta_inoc12, Day==day)
samids <- meta_subset$SampleID
bNTI_list_inoc12_whole <- bNTI_inoc12_whole %>%
select(samids) %>% # get columns with samples of interest
rownames_to_column(var="SampleID") %>%
filter(SampleID %in% samids) %>% # get rows with samples of interest
column_to_rownames(var="SampleID") %>%
as.matrix() %>%
as.list() %>%
unlist() %>% # flatten the dataframe into a list
.[!is.na(.)] # remove NAs
bNTI_mean_inoc12_whole <- mean(bNTI_list_inoc12_whole)
this_row <- data.frame(Inoculant=12, Day=day, bNTI_mean=bNTI_mean_inoc12_whole)
bNTI_contrasts_inoc12_whole <- bind_rows(bNTI_contrasts_inoc12_whole, this_row)
}
bNTI_contrasts_inoc12_whole <- arrange(bNTI_contrasts_inoc12_whole, Day) %>%
mutate(community = "whole")
bNTI_contrasts_inoc12_whole %>%
ggplot(aes(x=Day, y=bNTI_mean)) +
geom_point() +
geom_line() +
geom_hline(yintercept = c(2, -2), linetype=41) +
geom_hline(yintercept = 0) +
theme_test()
# Inoculant 2 only
meta_inoc2 <- meta %>%
filter(Inoculant==2 & Type=="Growth") %>%
select(SampleID, Sample, Inoculant, Day)
count_inoc2 <- select(count, as.character(meta_inoc2$SampleID))
matched_inoc2_whole <- match.phylo.data(tree, count_inoc2)
# Calculate empirical betaMNTD
bMNTD_inoc2_whole <-  as.matrix(comdistnt(t(matched_inoc2_whole$data), cophenetic(matched_inoc2_whole$phy), abundance.weighted=T))
# Double check data compatibility, both should be TRUE
identical(colnames(matched_inoc2_whole$data), colnames(bMNTD_inoc2_whole))
identical(colnames(matched_inoc2_whole$data), rownames(bMNTD_inoc2_whole))
# Calculate randomized betaMNTD (999 randomizations)
reps <- 999
rand_bMNTD_inoc2_whole <- array(c(-999), dim=c(ncol(matched_inoc2_whole$data), ncol(matched_inoc2_whole$data), reps))
dim(rand_bMNTD_inoc2_whole)
for (rep in 1:reps) {
rand_bMNTD_inoc2_whole[,,rep] = as.matrix(comdistnt(t(matched_inoc2_whole$data), taxaShuffle(cophenetic(matched_inoc2_whole$phy)), abundance.weighted=T, exclude.conspecifics=F))
print(c(date(), rep))
}
# Calculate betaNTI
bNTI_inoc2_whole = matrix(c(NA), nrow=ncol(matched_inoc2_whole$data), ncol=ncol(matched_inoc2_whole$data)) # create empty matrix of same size
dim(bNTI_inoc2_whole)
for (column in 1:(ncol(matched_inoc2_whole$data) - 1)) {
for (row in (column + 1):ncol(matched_inoc2_whole$data)) {
rand_vals = rand_bMNTD_inoc2_whole[row, column,]
bNTI_inoc2_whole[row, column] = (bMNTD_inoc2_whole[row, column] - mean(rand_vals)) / sd(rand_vals)
#rm("rand_vals")
}
}
rownames(bNTI_inoc2_whole) = colnames(matched_inoc2_whole$data);
colnames(bNTI_inoc2_whole) = colnames(matched_inoc2_whole$data);
# Visualize
hist(bNTI_inoc2_whole)
# Save output
saveRDS(bNTI_inoc2_whole, file="../data_intermediate/SFA2_bNTI_inoc2_whole.rds")
saveRDS(rand_bMNTD_inoc2_whole, file="../data_intermediate/SFA2_bMNTD_rand_inoc2_whole.rds")
# Load calculations
# whole community bNTI
bNTI_inoc2_whole <- readRDS("../data_intermediate/SFA2_bNTI_inoc2_whole.rds") %>%
as.data.frame()
# whole community permuted bMNTD
rand_bMNTD_inoc2_whole <- readRDS("../data_intermediate/SFA2_bMNTD_rand_inoc2_whole.rds")
bNTI_contrasts_inoc2_whole <- data.frame()
for (day in unique(meta_inoc2$Day)) {
meta_subset <- filter(meta_inoc2, Day==day)
samids <- meta_subset$SampleID
bNTI_list_inoc2_whole <- bNTI_inoc2_whole %>%
select(samids) %>% # get columns with samples of interest
rownames_to_column(var="SampleID") %>%
filter(SampleID %in% samids) %>% # get rows with samples of interest
column_to_rownames(var="SampleID") %>%
as.matrix() %>%
as.list() %>%
unlist() %>% # flatten the dataframe into a list
.[!is.na(.)] # remove NAs
bNTI_mean_inoc2_whole <- mean(bNTI_list_inoc2_whole)
this_row <- data.frame(Inoculant=2, Day=day, bNTI_mean=bNTI_mean_inoc2_whole)
bNTI_contrasts_inoc2_whole <- bind_rows(bNTI_contrasts_inoc2_whole, this_row)
}
bNTI_contrasts_inoc2_whole <- arrange(bNTI_contrasts_inoc2_whole, Day) %>%
mutate(community="whole")
bNTI_contrasts_inoc2_whole %>%
ggplot(aes(x=Day, y=bNTI_mean)) +
geom_point() +
geom_line() +
geom_hline(yintercept = c(2, -2), linetype=41) +
geom_hline(yintercept = 0) +
theme_test()
# Inoculant 10 only
meta_inoc10 <- meta %>%
filter(Inoculant==10 & Type=="Growth") %>%
select(SampleID, Sample, Inoculant, Day)
count_inoc10 <- select(count, as.character(meta_inoc10$SampleID))
matched_inoc10_whole <- match.phylo.data(tree, count_inoc10)
# Calculate empirical betaMNTD
bMNTD_inoc10_whole <-  as.matrix(comdistnt(t(matched_inoc10_whole$data), cophenetic(matched_inoc10_whole$phy), abundance.weighted=T))
# Double check data compatibility, both should be TRUE
identical(colnames(matched_inoc10_whole$data), colnames(bMNTD_inoc10_whole))
identical(colnames(matched_inoc10_whole$data), rownames(bMNTD_inoc10_whole))
# Calculate randomized betaMNTD (999 randomizations)
reps <- 999
rand_bMNTD_inoc10_whole <- array(c(-999), dim=c(ncol(matched_inoc10_whole$data), ncol(matched_inoc10_whole$data), reps))
dim(rand_bMNTD_inoc10_whole)
for (rep in 1:reps) {
rand_bMNTD_inoc10_whole[,,rep] = as.matrix(comdistnt(t(matched_inoc10_whole$data), taxaShuffle(cophenetic(matched_inoc10_whole$phy)), abundance.weighted=T, exclude.conspecifics=F))
print(c(date(), rep))
}
# Calculate betaNTI
bNTI_inoc10_whole = matrix(c(NA), nrow=ncol(matched_inoc10_whole$data), ncol=ncol(matched_inoc10_whole$data)) # create empty matrix of same size
dim(bNTI_inoc10_whole)
for (column in 1:(ncol(matched_inoc10_whole$data) - 1)) {
for (row in (column + 1):ncol(matched_inoc10_whole$data)) {
rand_vals = rand_bMNTD_inoc10_whole[row, column,]
bNTI_inoc10_whole[row, column] = (bMNTD_inoc10_whole[row, column] - mean(rand_vals)) / sd(rand_vals)
#rm("rand_vals")
}
}
rownames(bNTI_inoc10_whole) = colnames(matched_inoc10_whole$data);
colnames(bNTI_inoc10_whole) = colnames(matched_inoc10_whole$data);
# Visualize
hist(bNTI_inoc10_whole)
# Save output
saveRDS(bNTI_inoc10_whole, file="../data_intermediate/SFA2_bNTI_inoc10_whole.rds")
saveRDS(rand_bMNTD_inoc10_whole, file="../data_intermediate/SFA2_bMNTD_rand_inoc10_whole.rds")
# Load calculations
# whole community bNTI
bNTI_inoc10_whole <- readRDS("../data_intermediate/SFA2_bNTI_inoc10_whole.rds") %>%
as.data.frame()
# whole community permuted bMNTD
rand_bMNTD_inoc10_whole <- readRDS("../data_intermediate/SFA2_bMNTD_rand_inoc10_whole.rds")
bNTI_contrasts_inoc10_whole <- data.frame()
for (day in unique(meta_inoc10$Day)) {
meta_subset <- filter(meta_inoc10, Day==day)
samids <- meta_subset$SampleID
bNTI_list_inoc10_whole <- bNTI_inoc10_whole %>%
select(samids) %>% # get columns with samples of interest
rownames_to_column(var="SampleID") %>%
filter(SampleID %in% samids) %>% # get rows with samples of interest
column_to_rownames(var="SampleID") %>%
as.matrix() %>%
as.list() %>%
unlist() %>% # flatten the dataframe into a list
.[!is.na(.)] # remove NAs
bNTI_mean_inoc10_whole <- mean(bNTI_list_inoc10_whole)
this_row <- data.frame(Inoculant=10, Day=day, bNTI_mean=bNTI_mean_inoc10_whole)
bNTI_contrasts_inoc10_whole <- bind_rows(bNTI_contrasts_inoc10_whole, this_row)
}
bNTI_contrasts_inoc10_whole <- arrange(bNTI_contrasts_inoc10_whole, Day) %>%
mutate(community="whole")
bNTI_contrasts_inoc10_whole %>%
ggplot(aes(x=Day, y=bNTI_mean)) +
geom_point() +
geom_line() +
geom_hline(yintercept = c(2, -2), linetype=41) +
geom_hline(yintercept = 0) +
theme_test()
# Inoculant 19 only
meta_inoc19 <- meta %>%
filter(Inoculant==19 & Type=="Growth") %>%
select(SampleID, Sample, Inoculant, Day)
count_inoc19 <- select(count, as.character(meta_inoc19$SampleID))
matched_inoc19_whole <- match.phylo.data(tree, count_inoc19)
# Calculate empirical betaMNTD
bMNTD_inoc19_whole <-  as.matrix(comdistnt(t(matched_inoc19_whole$data), cophenetic(matched_inoc19_whole$phy), abundance.weighted=T))
# Double check data compatibility, both should be TRUE
identical(colnames(matched_inoc19_whole$data), colnames(bMNTD_inoc19_whole))
identical(colnames(matched_inoc19_whole$data), rownames(bMNTD_inoc19_whole))
# Calculate randomized betaMNTD (999 randomizations)
reps <- 999
rand_bMNTD_inoc19_whole <- array(c(-999), dim=c(ncol(matched_inoc19_whole$data), ncol(matched_inoc19_whole$data), reps))
dim(rand_bMNTD_inoc19_whole)
for (rep in 1:reps) {
rand_bMNTD_inoc19_whole[,,rep] = as.matrix(comdistnt(t(matched_inoc19_whole$data), taxaShuffle(cophenetic(matched_inoc19_whole$phy)), abundance.weighted=T, exclude.conspecifics=F))
print(c(date(), rep))
}
# Calculate betaNTI
bNTI_inoc19_whole = matrix(c(NA), nrow=ncol(matched_inoc19_whole$data), ncol=ncol(matched_inoc19_whole$data)) # create empty matrix of same size
dim(bNTI_inoc19_whole)
for (column in 1:(ncol(matched_inoc19_whole$data) - 1)) {
for (row in (column + 1):ncol(matched_inoc19_whole$data)) {
rand_vals = rand_bMNTD_inoc19_whole[row, column,]
bNTI_inoc19_whole[row, column] = (bMNTD_inoc19_whole[row, column] - mean(rand_vals)) / sd(rand_vals)
#rm("rand_vals")
}
}
rownames(bNTI_inoc19_whole) = colnames(matched_inoc19_whole$data);
colnames(bNTI_inoc19_whole) = colnames(matched_inoc19_whole$data);
# Visualize
hist(bNTI_inoc19_whole)
# Save output
saveRDS(bNTI_inoc19_whole, file="../data_intermediate/SFA2_bNTI_inoc19_whole.rds")
saveRDS(rand_bMNTD_inoc19_whole, file="../data_intermediate/SFA2_bMNTD_rand_inoc19_whole.rds")
# Load calculations
# whole community bNTI
bNTI_inoc19_whole <- readRDS("../data_intermediate/SFA2_bNTI_inoc19_whole.rds") %>%
as.data.frame()
# whole community permuted bMNTD
rand_bMNTD_inoc19_whole <- readRDS("../data_intermediate/SFA2_bMNTD_rand_inoc19_whole.rds")
bNTI_contrasts_inoc19_whole <- data.frame()
for (day in unique(meta_inoc19$Day)) {
meta_subset <- filter(meta_inoc19, Day==day)
samids <- meta_subset$SampleID
bNTI_list_inoc19_whole <- bNTI_inoc19_whole %>%
select(samids) %>% # get columns with samples of interest
rownames_to_column(var="SampleID") %>%
filter(SampleID %in% samids) %>% # get rows with samples of interest
column_to_rownames(var="SampleID") %>%
as.matrix() %>%
as.list() %>%
unlist() %>% # flatten the dataframe into a list
.[!is.na(.)] # remove NAs
bNTI_mean_inoc19_whole <- mean(bNTI_list_inoc19_whole)
this_row <- data.frame(Inoculant=19, Day=day, bNTI_mean=bNTI_mean_inoc19_whole)
bNTI_contrasts_inoc19_whole <- bind_rows(bNTI_contrasts_inoc19_whole, this_row)
}
bNTI_contrasts_inoc19_whole <- arrange(bNTI_contrasts_inoc19_whole, Day) %>%
mutate(community="whole")
bNTI_contrasts_inoc19_whole %>%
ggplot(aes(x=Day, y=bNTI_mean)) +
geom_point() +
geom_line() +
geom_hline(yintercept = c(2, -2), linetype=41) +
geom_hline(yintercept = 0) +
theme_test()
# Inoculant 47 only
meta_inoc47 <- meta %>%
filter(Inoculant==47 & Type=="Growth") %>%
select(SampleID, Sample, Inoculant, Day)
count_inoc47 <- select(count, as.character(meta_inoc47$SampleID))
matched_inoc47_whole <- match.phylo.data(tree, count_inoc47)
# Calculate empirical betaMNTD
bMNTD_inoc47_whole <-  as.matrix(comdistnt(t(matched_inoc47_whole$data), cophenetic(matched_inoc47_whole$phy), abundance.weighted=T))
# Double check data compatibility, both should be TRUE
identical(colnames(matched_inoc47_whole$data), colnames(bMNTD_inoc47_whole))
identical(colnames(matched_inoc47_whole$data), rownames(bMNTD_inoc47_whole))
# Calculate randomized betaMNTD (999 randomizations)
reps <- 999
rand_bMNTD_inoc47_whole <- array(c(-999), dim=c(ncol(matched_inoc47_whole$data), ncol(matched_inoc47_whole$data), reps))
dim(rand_bMNTD_inoc47_whole)
for (rep in 1:reps) {
rand_bMNTD_inoc47_whole[,,rep] = as.matrix(comdistnt(t(matched_inoc47_whole$data), taxaShuffle(cophenetic(matched_inoc47_whole$phy)), abundance.weighted=T, exclude.conspecifics=F))
print(c(date(), rep))
}
# Calculate betaNTI
bNTI_inoc47_whole = matrix(c(NA), nrow=ncol(matched_inoc47_whole$data), ncol=ncol(matched_inoc47_whole$data)) # create empty matrix of same size
dim(bNTI_inoc47_whole)
for (column in 1:(ncol(matched_inoc47_whole$data) - 1)) {
for (row in (column + 1):ncol(matched_inoc47_whole$data)) {
rand_vals = rand_bMNTD_inoc47_whole[row, column,]
bNTI_inoc47_whole[row, column] = (bMNTD_inoc47_whole[row, column] - mean(rand_vals)) / sd(rand_vals)
#rm("rand_vals")
}
}
rownames(bNTI_inoc47_whole) = colnames(matched_inoc47_whole$data);
colnames(bNTI_inoc47_whole) = colnames(matched_inoc47_whole$data);
# Visualize
hist(bNTI_inoc47_whole)
# Save output
saveRDS(bNTI_inoc47_whole, file="../data_intermediate/SFA2_bNTI_inoc47_whole.rds")
saveRDS(rand_bMNTD_inoc47_whole, file="../data_intermediate/SFA2_bMNTD_rand_inoc47_whole.rds")
# Load calculations
# whole community bNTI
bNTI_inoc47_whole <- readRDS("../data_intermediate/SFA2_bNTI_inoc47_whole.rds") %>%
as.data.frame()
# whole community permuted bMNTD
rand_bMNTD_inoc47_whole <- readRDS("../data_intermediate/SFA2_bMNTD_rand_inoc47_whole.rds")
bNTI_contrasts_inoc47_whole <- data.frame()
for (day in unique(meta_inoc47$Day)) {
meta_subset <- filter(meta_inoc47, Day==day)
samids <- meta_subset$SampleID
bNTI_list_inoc47_whole <- bNTI_inoc47_whole %>%
select(samids) %>% # get columns with samples of interest
rownames_to_column(var="SampleID") %>%
filter(SampleID %in% samids) %>% # get rows with samples of interest
column_to_rownames(var="SampleID") %>%
as.matrix() %>%
as.list() %>%
unlist() %>% # flatten the dataframe into a list
.[!is.na(.)] # remove NAs
bNTI_mean_inoc47_whole <- mean(bNTI_list_inoc47_whole)
this_row <- data.frame(Inoculant=47, Day=day, bNTI_mean=bNTI_mean_inoc47_whole)
bNTI_contrasts_inoc47_whole <- bind_rows(bNTI_contrasts_inoc47_whole, this_row)
}
bNTI_contrasts_inoc47_whole <- arrange(bNTI_contrasts_inoc47_whole, Day) %>%
mutate(community="whole")
bNTI_contrasts_inoc47_whole %>%
ggplot(aes(x=Day, y=bNTI_mean)) +
geom_point() +
geom_line() +
geom_hline(yintercept = c(2, -2), linetype=41) +
geom_hline(yintercept = 0) +
theme_test()
bNTI_all <- bind_rows(bNTI_contrasts_inoc41_whole,
bNTI_contrasts_inoc12_whole,
bNTI_contrasts_inoc2_whole,
bNTI_contrasts_inoc10_whole,
bNTI_contrasts_inoc19_whole,
bNTI_contrasts_inoc47_whole) %>%
mutate(Inoculant = as.character(Inoculant))
# Average across inoculants for whole and growth
bNTI_overall <- bNTI_all %>%
group_by(Day, community) %>%
summarize(bNTI_mean = mean(bNTI_mean)) %>%
ungroup() %>%
mutate(Inoculant = "overall")
# Combine
bNTI_all <- bind_rows(bNTI_all, bNTI_overall)
bNTI_all %>%
filter(community=="whole", Inoculant != "overall") %>%
ggplot(aes(x=Day, y=bNTI_mean)) +
geom_point(aes(color=Inoculant)) +
geom_line(aes(color=Inoculant)) +
geom_hline(yintercept = c(2,-2), linetype=2) +
theme_test()
bNTI_all %>%
filter(community=="whole", Inoculant == "overall") %>%
ggplot(aes(x=Day, y=bNTI_mean)) +
geom_point(aes(color=Inoculant)) +
geom_line(aes(color=Inoculant)) +
geom_hline(yintercept = c(2,-2), linetype=2) +
theme_test()
bNTI_all %>%
filter(community=="whole") %>%
mutate(fade = if_else(Inoculant=="overall", "yes", "no")) %>%
ggplot(aes(x=Day, y=bNTI_mean, alpha=fade)) +
geom_point(aes(color=Inoculant)) +
geom_line(aes(color=Inoculant)) +
geom_hline(yintercept = c(2,-2), linetype=2) +
geom_vline(xintercept = 9) +
theme_test()
# Calculate wunifrac distance
wuni_dist <- distance(physeq, method="wunifrac")
meta_sub <- select(meta, SampleID, Inoculant, Day)
# Reformat
wuni_df <- wuni_dist %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var="Sample1") %>%
pivot_longer(-Sample1, names_to = "Sample2", values_to = "wuni_dist")
wuni_df <- wuni_df[wuni_df$Sample1 != wuni_df$Sample2,] # remove self-comparisons
# Remove duplicates
# SLOW
# Sort sample1 and sample2 to create a unique label for duplicates regardless of order in columns
all_labels <- as.character()
for (i in 1:nrow(wuni_df)) {
string <- wuni_df[i,] %>%
select(Sample1, Sample2) %>%
as.character() %>%
sort()
label <- paste0(string[1], string[2])
all_labels <- append(all_labels, label)
}
wuni_df2 <- bind_cols(wuni_df, all_labels) %>%
select(wuni_dist, label=`...4`) %>%
distinct() %>% # remove duplicate pairwise comparisons!
mutate(Sample1 = gsub("(sa[0-9]+)(sa[0-9]+)", "\\1", label),
Sample2 = gsub("(sa[0-9]+)(sa[0-9]+)", "\\2", label)) %>%
select(Sample1, Sample2, wuni_dist)
saveRDS(wuni_df2, "../data_intermediate/SFA2_wunidist_slim.rds")
wuni_df <- readRDS("../data_intermediate/SFA2_wunidist_slim.rds")
# Comparisons of interest
wuni_within <- data.frame()
for (i in unique(meta$Inoculant)) {
for (d in unique(meta[meta$Inoculant==i,]$Day)) {
sams <- filter(meta, Inoculant==i & Day==d)
sams <- sams$SampleID
wuni_sub <- filter(wuni_df, Sample1 %in% sams & Sample2 %in% sams) # isolate samples of interest
wuni_avg <- mean(wuni_sub$wuni_dist) # average
this_row <- bind_cols(Inoculant=i, Day=d, wuni_dist=wuni_avg)
wuni_within <- bind_rows(wuni_within, this_row)
}
}
# Visualize
wuni_within %>%
ggplot(aes(x=Day, y=wuni_dist)) +
geom_boxplot(aes(group=Day)) +
labs(y="Weighted unifrac distance (between replicates)") +
theme_test()
wuni_within %>%
ggplot(aes(x=Day, y=wuni_dist, color=Inoculant)) +
geom_point() +
geom_line() +
facet_wrap(~Inoculant) +
labs(y="Weighted unifrac distance (between replicates)") +
theme_test()
# Graph formatting to color time points
meta_format <- data.frame(sample_data(physeq)) %>%
mutate(leveloff = if_else(Day >=9, "pre", "post"),
firstlast = if_else(Day==0, "start", if_else(Day==30, "end", "between")))
physeq_format <- phyloseq(physeq@otu_table, physeq@tax_table, physeq@phy_tree, sample_data(meta_format))
# Ordinate
# Using pcoa because no convergence with nmds
ord_pcoa <- ordinate(physeq_format, method="PCoA", distance=wuni_dist)
# Visualize
plot_ordination(physeq_format, ord_pcoa, color="Inoculant") +
facet_wrap(~Day) +
theme_test()
plot_ordination(physeq_format, ord_pcoa, color="firstlast") +
facet_wrap(~Inoculant) +
theme_test()
# Overall
adonis(wuni_dist~Inoculant*Day, data=meta, permutations=999)
# TP 0
meta_day0 <- meta %>% filter(Day==0)
physeq_day0 <- subset_samples(physeq, Day==0)
wuni_day0 <- distance(physeq_day0, method="wunifrac")
adonis(wuni_day0~Inoculant, data=meta_day0, permutations=999)
# TP 30
meta_day30 <- meta %>% filter(Day==30)
physeq_day30 <- subset_samples(physeq, Day==30)
wuni_day30 <- distance(physeq_day30, method="wunifrac")
adonis(wuni_day30~Inoculant, data=meta_day30, permutations=999)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
knitr::opts_chunk$set(message = FALSE)
# Clear working directory, load in packages, generate package info
rm(list=ls())
library("tidyverse")
library("ape")
library("phyloseq")
sessionInfo()
# Rep 1
count_rep1 <- read_tsv(file="~/SFA/data_amplicon/SFA2_full/rep1/final/SFA2_rep1.counts-final.tsv")
tax_rep1 <- read_tsv(file="~/SFA/data_amplicon/SFA2_full/rep1/final/SFA2_rep1.taxonomy-final.tsv")
# Rep 2
count_rep2 <- read_tsv(file="~/SFA/data_amplicon/SFA2_full/rep2/final/SFA2_rep2.counts-final.tsv")
tax_rep2 <- read_tsv(file="~/SFA/data_amplicon/SFA2_full/rep2/final/SFA2_rep2.taxonomy-final.tsv")
# Rep 3
count_rep3 <- read_tsv(file="~/SFA/data_amplicon/SFA2_full/rep3/final/SFA2_rep3.counts-final.tsv")
tax_rep3 <- read_tsv(file="~/SFA/data_amplicon/SFA2_full/rep3/final/SFA2_rep3.taxonomy-final.tsv")
# Redos
count_redos <- read_tsv(file="~/SFA/data_amplicon/SFA2_full/redos/final/SFA2_redos.counts-final.tsv")
tax_redos <- read_tsv(file="~/SFA/data_amplicon/SFA2_full/redos/final/SFA2_redos.taxonomy-final.tsv")
# Tree
tree <- read.tree(file="~/SFA/data_amplicon/SFA2_full/tree/SFA2_full.tree-final.nwk")
# Metadata
meta <- read_tsv(file = "~/SFA/data_amplicon/SFA2_full/SFA2_metadata_corrected.tsv") %>%
mutate(Inoculant = as.character(Inoculant), # Tidy up
SampleID = gsub("([0-9]+)", "sa\\1", SampleID)) %>%
select(SampleID, Sample, Type, Inoculant, Day, Replicate, Attempt, Library, PCR_plate, Primer_num) # keep relevant variables only
# Count data combine
count <- full_join(count_rep1, count_rep2, by="ASV") %>%
full_join(count_rep3, by="ASV") %>%
full_join(count_redos, by="ASV") %>%
mutate(across(-ASV, ~ if_else(is.na(.x), 0, .x))) # turn coerced NAs into 0s
# Taxonomy table combine
tax <- full_join(tax_rep1, tax_rep2) %>%
full_join(tax_rep3) %>%
full_join(tax_redos) %>%
mutate(rownames = ASV) %>% # Add an ASV column
column_to_rownames(var="rownames") %>% # restore rownames
select(Domain:Species, ASV)
View(tax)
filter(tax, Phylum=="Cyanobacteria") %>% View()
filter(tax, Family=="Mitochondria") %>% View()
