bin1_plot <- ggplot(example_dat, aes(x=Day, y=ln_norm_abund_avg)) +
geom_point(aes(shape=startend), size=4, color="#6F7378") +
geom_line(color="#6F7378") +
geom_smooth(method="lm", data=example_dat[example_est$start_pt:example_est$end_pt,],
linetype=2, color="black") +
geom_vline(xintercept = 9, linetype=2) +
labs(title=example_title, x="", y="") +
scale_shape_manual(values=c(1, 16)) +
theme_test() +
theme(title = element_text(size=18),
axis.text = element_text(size=16),
legend.position = "none")
bin1_plot
ggsave("../figures/ISME18_bin1example.png", bin1_plot, width=7.5, height=5, units="in")
example_est <- growth_tidy[79,]
example_dat <- filter(norm_tidy, label==example_est$label) %>%
mutate(startend = if_else(Day==example_est$start_day | Day==example_est$end_day, "yes", "no"))
example_tax <- filter(tax, ASV == example_est$ASV)
example_title <- paste0(example_tax$Phylum, ", ", example_tax$Genus)
bin2_plot <- ggplot(example_dat, aes(x=Day, y=ln_norm_abund_avg)) +
geom_point(aes(shape=startend), size=4, color="#6F7378") +
geom_line(color="#6F7378") +
geom_smooth(method="lm", data=example_dat[example_est$start_pt:example_est$end_pt,],
linetype=2, color="black") +
geom_vline(xintercept = 9, linetype=2) +
labs(title=example_title, x="", y="") +
scale_shape_manual(values=c(1, 16)) +
theme_test() +
theme(title = element_text(size=18),
axis.text = element_text(size=16),
legend.position = "none")
bin2_plot
ggsave("../figures/ISME18_bin2example.png", bin2_plot, width=7.5, height=5, units="in")
example_est <- growth_tidy[162,]
example_dat <- filter(norm_tidy, label==example_est$label) %>%
mutate(startend = if_else(Day==example_est$start_day | Day==example_est$end_day, "yes", "no"))
example_tax <- filter(tax, ASV == example_est$ASV)
example_title <- paste0(example_tax$Phylum, ", ", example_tax$Genus)
bin3_plot <- ggplot(example_dat, aes(x=Day, y=ln_norm_abund_avg)) +
geom_point(aes(shape=startend), size=4, color="#6F7378") +
geom_line(color="#6F7378") +
geom_smooth(method="lm", data=example_dat[example_est$start_pt:example_est$end_pt,],
linetype=2, color="black") +
geom_vline(xintercept = 9, linetype=2) +
labs(title=example_title, x="", y="") +
scale_shape_manual(values=c(1, 16)) +
theme_test() +
theme(title = element_text(size=18),
axis.text = element_text(size=16),
legend.position = "none")
bin3_plot
ggsave("../figures/ISME18_bin3example.png", bin3_plot, width=7.5, height=5, units="in")
# Plotting for presentations/posters
example_est <- growth_tidy[157,]
example_dat <- filter(norm_tidy, label==example_est$label) %>%
mutate(startend = if_else(Day==example_est$start_day | Day==example_est$end_day, "yes", "no"))
example_tax <- filter(tax, ASV == example_est$ASV)
example_title <- paste0(example_tax$Phylum, ", ", example_tax$Genus)
bin1_plot <- ggplot(example_dat, aes(x=Day, y=ln_norm_abund_avg)) +
geom_point(aes(shape=startend), size=4, color="#6F7378") +
geom_line(color="#6F7378") +
geom_smooth(method="lm", data=example_dat[example_est$start_pt:example_est$end_pt,],
linetype=2, color="black") +
geom_vline(xintercept = 9, linetype=2) +
labs(title=example_title, x="", y="") +
scale_shape_manual(values=c(1, 16)) +
theme_test() +
theme(title = element_text(size=18),
axis.text = element_text(size=16),
legend.position = "none")
bin1_plot
ggsave("../figures/ISME18_bin1example.png", bin1_plot, width=7.5, height=5, units="in")
example_est <- growth_tidy[79,]
example_dat <- filter(norm_tidy, label==example_est$label) %>%
mutate(startend = if_else(Day==example_est$start_day | Day==example_est$end_day, "yes", "no"))
example_tax <- filter(tax, ASV == example_est$ASV)
example_title <- paste0(example_tax$Phylum, ", ", example_tax$Genus)
bin2_plot <- ggplot(example_dat, aes(x=Day, y=ln_norm_abund_avg)) +
geom_point(aes(shape=startend), size=4, color="#6F7378") +
geom_line(color="#6F7378") +
geom_smooth(method="lm", data=example_dat[example_est$start_pt:example_est$end_pt,],
linetype=2, color="black") +
geom_vline(xintercept = 9, linetype=2) +
labs(title=example_title, x="", y="") +
scale_shape_manual(values=c(1, 16)) +
theme_test() +
theme(title = element_text(size=18),
axis.text = element_text(size=16),
legend.position = "none")
bin2_plot
ggsave("../figures/ISME18_bin2example.png", bin2_plot, width=7.5, height=5, units="in")
example_est <- growth_tidy[162,]
example_dat <- filter(norm_tidy, label==example_est$label) %>%
mutate(startend = if_else(Day==example_est$start_day | Day==example_est$end_day, "yes", "no"))
example_tax <- filter(tax, ASV == example_est$ASV)
example_title <- paste0(example_tax$Phylum, ", ", example_tax$Genus)
bin3_plot <- ggplot(example_dat, aes(x=Day, y=ln_norm_abund_avg)) +
geom_point(aes(shape=startend), size=4, color="#6F7378") +
geom_line(color="#6F7378") +
geom_smooth(method="lm", data=example_dat[example_est$start_pt:example_est$end_pt,],
linetype=2, color="black") +
geom_vline(xintercept = 9, linetype=2) +
labs(title=example_title, x="", y="") +
scale_shape_manual(values=c(1, 16)) +
theme_test() +
theme(title = element_text(size=18),
axis.text = element_text(size=16),
legend.position = "none")
bin3_plot
ggsave("../figures/ISME18_bin3example.png", bin3_plot, width=7.5, height=5, units="in")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
# Clear working directory, load in packages, generate package info
rm(list=ls())
library("phyloseq")
library("vegan")
library("tidyverse")
library("lmerTest")
sessionInfo()
# Metadata
meta <- readRDS("../data_intermediate/SFA2_metadata.rds")
# Growth estimates
growth <- readRDS("../data_intermediate/SFA2_growth_estimates_pap.rds")
# Death estimates
death <- readRDS("../data_intermediate/SFA2_death_estimates_pap.rds")
# Normalized abundance data
norm <- readRDS("../data_intermediate/SFA2_normalized.rds")
# Rarefied phyloseq
physeq <- readRDS("../data_intermediate/SFA2_physeq_rare.rds")
# Add metadata and reformat
meta <- meta %>%
select(SampleID, Sample, Inoculant, Day, Replicate)
norm_meta <- norm %>%
full_join(meta)
# Calculate total normalized abundance through time
norm_total <- norm_meta %>%
group_by(Inoculant, Day, ASV) %>%
summarize(norm_abund_avg = mean(norm_abund, na.rm=TRUE)) %>% # average across reps
ungroup() %>%
group_by(Inoculant, Day) %>%
summarize(whole = sum(norm_abund_avg, na.rm=TRUE)) %>% # calc total abund
ungroup()
# Visualize
norm_total %>%
filter(Inoculant %in% c(10, 12,19, 2, 41,47)) %>%
ggplot(aes(x=Day, y=log(whole), color=Inoculant)) +
geom_point() +
geom_line() +
labs(title="Total community normalized abundance") +
theme_test()
# Make a label
growth_labels <- growth %>%
mutate(label = paste0(Inoculant, ASV)) %>%
select(label)
# Calculate total normalized abundance through time
norm_total_gr <- norm_meta %>%
mutate(label = paste0(Inoculant, ASV)) %>%
inner_join(growth_labels) %>% # isolate growing taxa only
group_by(Inoculant, Day, ASV) %>% # average across replicates
summarize(norm_abund_avg = mean(norm_abund, na.rm=TRUE)) %>%
ungroup() %>%
group_by(Inoculant, Day) %>% # total normalized abundance
summarize(growth = sum(norm_abund_avg, na.rm=TRUE)) %>%
ungroup()
# Visualize
norm_total_gr %>%
ggplot(aes(x=Day, y=log(growth), color=Inoculant)) +
geom_point() +
geom_line() +
labs(title="Growing taxa total normalized abundance") +
theme_test()
# Combine whole community and growing community normalized abundance totals
norm_total_all <- norm_total %>%
inner_join(norm_total_gr) %>%
pivot_longer(-c(Inoculant, Day), names_to="type", values_to="norm_abund")
# Visualize
norm_total_all %>%
ggplot(aes(x=Day, y=log(norm_abund), alpha=type)) +
geom_point() +
geom_line() +
facet_wrap(~Inoculant) +
theme_test()
norm_total_all %>%
group_by(Day, type) %>%
summarize(norm_abund = mean(norm_abund, na.rm=TRUE)) %>%
ungroup() %>%
#filter(type=="growth") %>%
mutate(type = fct_relevel(type, "whole", "growth")) %>%
ggplot(aes(x=Day, y=log(norm_abund))) +
geom_point(aes(shape=type), size=3) +
geom_line(aes(linetype=type)) +
geom_vline(xintercept = 9, linetype=2) +
labs(y="Total relational abundance (ln)") +
theme_test() +
theme(axis.title = element_text(size=20),
axis.text = element_text(size=20))
# For poster/presentation
plot1 <- norm_total_all %>%
group_by(Day, type) %>%
summarize(norm_abund = mean(norm_abund, na.rm=TRUE)) %>%
ungroup() %>%
filter(type=="growth") %>%
ggplot(aes(x=Day, y=log(norm_abund))) +
geom_point(size=3) +
geom_line() +
geom_vline(xintercept = 9, linetype=2) +
labs(y="", x="") +
theme_test() +
theme(axis.text = element_text(size=20))
plot1
ggsave("../figures/ISME18_batchcurve.png", plot1, width=6, height=5, units = "in")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(tidyverse)
library(cowplot)
sessionInfo()
rm(list=ls())
# List of directories containing data files
dir = list.dirs(path="../data_CO2/SFA2/data", full.names=TRUE, recursive=FALSE)
# Create lists of .txt files from directories
files = list()
for (i in dir) {
files[[i]] <- list.files(path=i, pattern="*.txt", full.names=TRUE, recursive=FALSE)
}
# Extract area data
# TIC, w/z44 (12C), w/z45 (13C)
# Construct data frame containing all data
area.df = tibble() # initialize empty tibble
for (i in names(files)) { # for each list of files (refers to a directory)
for (x in files[[i]]) { # for each file in the selected list (directory)
# Create sample names based on file names
# Strips the rest of the path from the sample name at the end
name = str_remove(x, "../data_CO2/SFA2/data/.+/") %>%
str_remove(".txt")
#name.list[[i]] = append(name.list[[i]], name)
# Isolate time point info
date = str_remove(x, "../data_CO2/SFA2/data/") %>%
str_remove("/.+.txt") %>%
str_remove(".+_")
tp = str_remove(x, "../data_CO2/SFA2/data/") %>%
str_remove("/.+.txt") %>%
str_remove("_.+")
# Isolate the area data and clean up
dat = read_tsv(x, skip=7, col_names=TRUE) %>%
select("Measurement" = Name, Area) %>% # keep only the name of sample and the area measurements collected
drop_na() %>%
mutate(Measurement = case_when(Measurement == "TIC" ~ "Ctotal", # more explicit measurement labels
Measurement == "m/z 44" ~ "C12",
Measurement == "m/z 45" ~ "C13"),
TP = tp, # adding additional metadata...
Date = date,
Sample = name)
area.df = rbind(area.df, dat) # add to master data frame
}
}
# Parse dates
area.df = area.df %>%
mutate(Date = gsub("([0-2]{2})([0-9]{2})([0-2]{2})", "\\1-\\2-20\\3", Date)) %>%
mutate(Date = parse_date(Date, "%m-%d-%Y"))
# Calculate
area.df = area.df %>%
pivot_wider(names_from = Measurement, values_from = Area) %>%
mutate(C1213 = C12+C13)
std.df = area.df %>%
filter(str_detect(Sample, "std"))
# Calculate adjusted areas
std.df = std.df %>%
mutate(Area.adj = if_else(str_detect(Sample, "[7-9]"), C1213*1.8, C1213, missing=NULL), # correct split-ratio
ppm = case_when(Sample == "std0" ~ 0, # add ppm
Sample == "std1" ~ 769,
Sample == "std2" ~ 1538,
Sample == "std3" ~ 3077,
Sample == "std4" ~ 7692,
Sample == "std5" ~ 15385,
Sample == "std6" ~ 30769,
Sample == "std7" ~ 76923,
Sample == "std7.5" ~ 153856,
Sample == "std8" ~ 230769,
Sample == "std8.5" ~ 307692,
Sample == "std9" ~ 384615))
std.df %>%
ggplot(aes(x=ppm, y=Area.adj)) +
geom_point() +
geom_smooth(method="lm") +
facet_wrap(~Date, scales="free") +
theme_test()
# Linear regressions
std.cal = tibble()
for (x in unique(std.df$Date)) {
dat = filter(std.df, Date==x)
std.lm = lm(Area.adj ~ ppm, dat)
this.row = bind_cols(Date = unique(dat$Date), # save results
intercept = summary(std.lm)$coefficients[1,1],
slope = summary(std.lm)$coefficients[2,1],
adjR2 = summary(std.lm)$adj.r.squared,
pval = summary(std.lm)$coefficients[2,4])
std.cal = bind_rows(std.cal, this.row)
}
std.cal
std.df %>%
filter(Sample != "std1") %>%
ggplot(aes(x=ppm, y=Area.adj)) +
geom_point() +
geom_smooth(method="lm") +
facet_wrap(~Date, scales="free") +
theme_test()
# Linear regressions
std.cal1 = tibble()
for (x in unique(std.df$Date)) {
dat1 = filter(std.df, Date==x & Sample != "std1")
std.lm1 = lm(Area.adj ~ ppm, dat)
date1 = unique(dat1$Date)
this.row1 = bind_cols(Date = date, coeff = summary(std.lm1)$coefficients[2,1], adjR2 = summary(std.lm1)$adj.r.squared , pval = summary(std.lm1)$coefficients[2,4]) # save coefficent, adj. R2, and p-value
std.cal1 = bind_rows(std.cal, this.row)
}
std.cal1
std.df %>%
filter(!(Sample %in% c("std1", "std4"))) %>%
ggplot(aes(x=ppm, y=Area.adj)) +
geom_point() +
geom_smooth(method="lm") +
facet_wrap(~Date, scales="free") +
theme_test()
# Linear regressions
std.cal14 = tibble()
for (x in unique(std.df$Date)) {
dat14 = filter(std.df, Date==x & Sample != "std1")
std.lm14 = lm(Area.adj ~ ppm, dat14)
this.row14 = bind_cols(coeff = summary(std.lm14)$coefficients[2,1], adjR2 = summary(std.lm14)$adj.r.squared , pval = summary(std.lm14)$coefficients[2,4]) # save coefficent, adj. R2, and p-value
std.cal14 = bind_rows(std.cal14, this.row14)
}
std.cal14
sample.df = anti_join(area.df, std.df) %>%
mutate(dummy_ppm = 0) %>% # dummy ppm for graphing with standards on ppm axis
filter(!str_detect(Sample, "[a-z]")) %>% # exclude other non-samples
mutate(Sample, Sample = parse_number(Sample))# convert to numeric
# Import metadata
meta = read_csv("../data_CO2/SFA2/SFA2_headspace_metadata.csv")
# Merge with CO2 data
sample.df = full_join(sample.df, meta, by="Sample")
# Compare samples against range of standards
std.df %>%
ggplot(aes(x=ppm, y=Area.adj)) +
geom_point(shape=1) +
geom_point(aes(y=C1213, x=dummy_ppm, color=Date), data=sample.df) +
labs(title="Samples vs. standards") +
theme_test()
# Observe progression of CO2 production
sample.df %>%
mutate(Control = if_else(Sample %in% c(379:384), "Y", "N")) %>% # distinguish negative control
ggplot(aes(y=C1213, x=Date)) +
labs(y="Area") +
geom_jitter(aes(color = Control)) +
labs(title="Quick look - respiration over time") +
theme_test()
# Isolate outlier and correct
outlier = sample.df %>%
subset(Sample==363 & TP=="tp6") %>%
mutate(Ctotal = Ctotal/2, C12 = C12/2, C13 = C13/2, C1213 = C1213/2) # halve measurements
# Replace in dataframe
sample.df = sample.df %>%
filter(!(Sample==363 & TP=="tp6")) %>%
bind_rows(outlier)
# Convert sample area to ppm using calibration curves
sample.conv = tibble()
for (d in unique(sample.df$Date)) {
cal = std.cal %>% filter(Date==d)
conv = sample.df %>%
filter(Date==d) %>%
mutate(ppm = (C1213 - cal$intercept)/cal$slope)
sample.conv = rbind(sample.conv, conv)
}
# Sanity check, plot against standards
std.df %>%
ggplot(aes(x=ppm, y=Area.adj)) +
geom_point(shape=1) +
geom_point(aes(y=C1213, x=ppm, color=Date), data=sample.conv) +
#scale_y_continuous(limits=c(0,500000)) +
#scale_x_continuous(limits=c(0, 20000)) +
theme_test() +
theme()
# Ideal gas law: n=(P*V)/(R*temp)
# NOTE: pressure does not matter for this calulation because it's all relative to the stds
R = 0.082057338 # universal gas constant, (L*atm)/(mol*K)
temp = 296.48 # K, 74F in lab throughout experiment
V = 0.013 # L, headspace of 30 mL serum bottle with sand ########### NEED TO DBL CHECK##########
mwCO2 = 44.01 # molecular weight (g/mol) of CO2
P = 1 #atm, assumes 1 atm in ucosms during sampling
# Calculate per time point
molCO2100 = P*V/(R*temp) # total mol of CO2 in headspace, if it were 100% CO2
mgCO2100 = molCO2100 * mwCO2*1000 # mol * g/mol * 1000mg/g = mg, mg of CO2 present if it were 100% CO2
sample.conv = mutate(sample.conv, mgCO2 = mgCO2100*(ppm*10^-6)) # actual mg CO2 based on ppm
# Cumulative mg CO2 and C
sample.totals = sample.conv %>%
group_by(Sample, Inoculant, DOC_predict) %>%
summarize(totalCO2mg = sum(mgCO2), totalCmg = totalCO2mg*(12/44)) %>%
ungroup()
meta <- read_tsv("../data_CO2/SFA2/headspace_tps_metadata.tsv")
respiration <- sample.conv %>%
select(Inoculant, TP, Date, mgCO2) %>%
mutate(Inoculant = as.character(Inoculant),
TP = gsub("tp", "", TP),
TP = as.numeric(TP),
Phase = if_else(TP < 6, "exp", "steady")) %>%
inner_join(meta)
resp_avg <- respiration %>%
group_by(Inoculant, TP, Day, Phase) %>%
summarize(CO2_avg = mean(mgCO2)) %>%
ungroup() %>%
filter(Inoculant!="51" & Inoculant!="0")
resp_avg %>%
ggplot(aes(x=Day, y=CO2_avg)) +
geom_point(size=2) +
geom_vline(xintercept=9, linetype=2) +
labs(y="CO2 (mg)") +
theme_test() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 15))
respiration %>%
filter(Day!=0) %>%
mutate(rate = mgCO2/Timeframe) %>%
group_by(Inoculant, TP, Day, Phase) %>%
summarize(rate_avg = mean(rate)) %>%
ungroup() %>%
filter(Inoculant!="51" & Inoculant!="0") %>%
ggplot(aes(x=Day, y=rate_avg)) +
geom_boxplot(aes(group=Day)) +
geom_jitter(size=2, alpha=0.5) +
geom_vline(xintercept=9, linetype=2) +
labs(y="Respiration rate (mgCO2/day)") +
theme_test() +
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 15))
respiration %>%
filter(Inoculant!=51) %>% # remove control
group_by(Phase, Day, Inoculant) %>% # Calculate mean CO2 per day per inoculant (average reps)
summarize(mgCO2_avg=mean(mgCO2)) %>%
ungroup() %>%
group_by(Phase, Inoculant) %>% # Calculate total CO2 in each phase per inoculant
summarize(mgCO2_total = sum(mgCO2_avg)) %>%
ungroup() %>%
group_by(Phase) %>% # Calculate total CO2 per phase average
summarize(mgCO2_avg = mean(mgCO2_total), mgCO2_sd=sd(mgCO2_total)) %>%
ungroup()
# For poster/presentation
resp_plot <- respiration %>%
filter(Day!=0) %>%
mutate(rate = mgCO2/Timeframe) %>%
group_by(Inoculant, TP, Day, Phase) %>%
summarize(rate_avg = mean(rate)) %>%
ungroup() %>%
filter(Inoculant!="51" & Inoculant!="0") %>%
ggplot(aes(x=Day, y=rate_avg)) +
geom_boxplot(aes(group=Day)) +
geom_jitter(size=3, alpha=0.5) +
geom_vline(xintercept=9, linetype=2) +
labs(y="", x="") +
theme_test() +
theme(axis.text = element_text(size = 24))
resp_plot
ggsave("../figures/ISME18_CO2.png", resp_plot, width=14, height=8, unit="in")
# For poster/presentation
resp_plot <- respiration %>%
filter(Day!=0) %>%
mutate(rate = mgCO2/Timeframe) %>%
group_by(Inoculant, TP, Day, Phase) %>%
summarize(rate_avg = mean(rate)) %>%
ungroup() %>%
filter(Inoculant!="51" & Inoculant!="0") %>%
ggplot(aes(x=Day, y=rate_avg)) +
geom_boxplot(aes(group=Day)) +
geom_jitter(size=3, alpha=0.5) +
geom_vline(xintercept=9, linetype=2) +
labs(y="", x="") +
theme_test() +
theme(axis.text = element_text(size = 24))
resp_plot
ggsave("../figures/ISME18_CO2.png", resp_plot, width=15, height=8, unit="in")
# For poster/presentation
resp_plot <- respiration %>%
filter(Day!=0) %>%
mutate(rate = mgCO2/Timeframe) %>%
group_by(Inoculant, TP, Day, Phase) %>%
summarize(rate_avg = mean(rate)) %>%
ungroup() %>%
filter(Inoculant!="51" & Inoculant!="0") %>%
ggplot(aes(x=Day, y=rate_avg)) +
geom_boxplot(aes(group=Day), color=black) +
geom_jitter(size=2, alpha=0.5) +
geom_vline(xintercept=9, linetype=2) +
labs(y="", x="") +
theme_test() +
theme(axis.text = element_text(size = 24))
# For poster/presentation
resp_plot <- respiration %>%
filter(Day!=0) %>%
mutate(rate = mgCO2/Timeframe) %>%
group_by(Inoculant, TP, Day, Phase) %>%
summarize(rate_avg = mean(rate)) %>%
ungroup() %>%
filter(Inoculant!="51" & Inoculant!="0") %>%
ggplot(aes(x=Day, y=rate_avg)) +
geom_boxplot(aes(group=Day), color="black") +
geom_jitter(size=2, alpha=0.5) +
geom_vline(xintercept=9, linetype=2) +
labs(y="", x="") +
theme_test() +
theme(axis.text = element_text(size = 24))
resp_plot
ggsave("../figures/ISME18_CO2.png", resp_plot, width=15, height=8, unit="in")
