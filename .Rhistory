count_aquifex <- filter(count_tax, Genus=="Aquifex")
# Spike-in read counts per sample
aquifex_totals <- count_aquifex %>%
select(-ASV, -Domain, -Phylum, -Class, -Order, -Family, -Genus, -Species) %>%
colSums() %>%
as_tibble
# Isolate plant reads
count_plant <- filter(count_tax, Family %in% c("Mitochondria", "Chloroplast"))
plant_totals <- count_plant %>%
select(-ASV, -Domain, -Phylum, -Class, -Order, -Family, -Genus, -Species) %>%
colSums() %>%
as_tibble
# Calculate % spike-in per sample
samples <- colnames(count[-1]) %>% as.double()
reads <- bind_cols(samples, read_totals, aquifex_totals, plant_totals) %>%
rename(SampleID=...1, total_reads=...2, aquifex_reads=value...3, plant_reads=value...4) %>%
mutate(prop_reads = aquifex_reads/total_reads,
prop_reads_noplant = aquifex_reads/(total_reads - plant_reads),
prop_plant = plant_reads/total_reads) %>%
inner_join(meta)
min(reads$prop_reads_noplant)
max(reads$prop_reads_noplant)
mean(reads$prop_reads_noplant)
median(reads$prop_reads_noplant)
reads %>%
ggplot(aes(x=SampleID, y=prop_reads_noplant, color=Type)) +
geom_point() +
labs(y="Spike-in proportion of reads") +
theme_test()
reads %>%
ggplot(aes(x=Day, y=prop_reads_noplant, color=Type)) +
geom_point() +
labs(y="Spike-in proportion of reads") +
theme_test()
reads %>%
ggplot(aes(x=read_totals, y=prop_reads_noplant, color=Type)) +
geom_point() +
labs(y="Spike-in proportion of reads", y="Sample read depth") +
theme_test()
dna <- read_csv("../data_picogreen/SFA2_dnaspikes.csv") %>%
select(SampleID=Sample, dna_conc=AdjConc, spike_group)
reads <- inner_join(reads, dna) %>%
mutate(spike_added_pg = if_else(spike_group=="low", 0.0341, 0.1707),
total_dna_pg = dna_conc*15*1000, # dna_conc is ng/uL, 15 uL of sample total
prop_dna = spike_added_pg/(total_dna_pg+spike_added_pg)) # double check
reads %>%
ggplot(aes(x=prop_dna, y=prop_reads_noplant)) +
geom_point(aes(color=Type)) +
#geom_hline(yintercept=0.01, linetype=2) +
#geom_hline(yintercept=0.1, linetype=2) +
labs(y="Spike-in proportion of reads", x="Spike-in proportion of total DNA") +
theme_test()
# Using linear regression
reads_lm <- lm(prop_reads~prop_dna, data=reads)
summary(reads_lm)
predict <- (0.01 - as.numeric(coefficients(reads_lm)[1]))/as.numeric(coefficients(reads_lm)[2])
predict
melt <- read_csv("../data_qPCR/SFA2_meltcurve_troubleshoot.csv") %>%
select(SampleID=Sample, melt_curve) %>%
mutate(melt_curve=case_when(melt_curve==0 ~ "normal",
melt_curve==1 ~ "intermediate",
melt_curve==2 ~ "high"))
reads <- inner_join(reads, melt)
reads %>%
ggplot(aes(x=melt_curve, y=prop_reads_noplant)) +
geom_jitter() +
labs(y="Spike-in proportion of reads", x="Meltcurve temperature") +
theme_test()
reads %>%
ggplot(aes(x=Day, y=prop_plant)) +
geom_point() +
theme_test() +
labs(y="Proportion plant sequences")
# Reformating
aquifex_asvs <- count_aquifex$ASV
aquifex_df <- count_aquifex %>%
column_to_rownames(var = "ASV") %>%
select(-(Domain:Species)) %>%
t() %>%
as_tibble()
sample_aquifex_totals <- rowSums(aquifex_df) %>%
as_tibble()
aquifex_df <- aquifex_df %>%
bind_cols(sample_aquifex_totals) %>%
rename(total_reads = value)
# Calculate % of total reads for each Aquifex ASV
aquifex_perc_df <- aquifex_df %>%
mutate_all(funs("_prop" = (./total_reads)*100)) %>%
select(ends_with("_prop"))
aquifex_perc_summary <- aquifex_perc_df %>%
select(-total_reads__prop) %>%
pivot_longer(cols = everything(), names_to = "ASV", values_to = "percent") %>%
group_by(ASV) %>%
summarize(avg = mean(percent), sd = sd(percent)) %>%
arrange(-avg)
asv_lengths <- read_tsv("../data_amplicon/SFA2rep1_trial/output/final/aquifex_seq_lengths.tsv")
asv_lengths %>%
ggplot() +
geom_histogram(aes(x=length)) +
labs(x="Aquifex ASV length") +
theme_test()
asv_lengths <- read_tsv("../data_amplicon/SFA2rep1_trial/output/final/aquifex_seq_lengths.tsv")
asv_lengths %>%
ggplot() +
geom_histogram(aes(x=length)) +
labs(x="Aquifex ASV length") +
theme_test()
# Reformating
aquifex_asvs <- count_aquifex$ASV
aquifex_df <- count_aquifex %>%
column_to_rownames(var = "ASV") %>%
select(-(Domain:Species)) %>%
t() %>%
as_tibble()
sample_aquifex_totals <- rowSums(aquifex_df) %>%
as_tibble()
aquifex_df <- aquifex_df %>%
bind_cols(sample_aquifex_totals) %>%
rename(total_reads = value)
# Calculate % of total reads for each Aquifex ASV
aquifex_perc_df <- aquifex_df %>%
mutate_all(funs("_prop" = (./total_reads)*100)) %>%
select(ends_with("_prop"))
aquifex_perc_summary <- aquifex_perc_df %>%
select(-total_reads__prop) %>%
pivot_longer(cols = everything(), names_to = "ASV", values_to = "percent") %>%
group_by(ASV) %>%
summarize(avg = mean(percent), sd = sd(percent)) %>%
arrange(-avg)
aquifex_perc_summary
View(aquifex_perc_summary)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
rm(list=ls())
library(tidyverse)
sessionInfo()
dna <- read_tsv("../data_picogreen/tidy_SFA2_nanotest_071521.txt") %>%
select(Sample, dna_conc = AdjConc)
meta <- read_tsv("../data_amplicon/SFA2_nanotest/SFA2_nanotest_metadata.tsv") %>%
rename(Sample = SampleID)
dna_meta <- full_join(meta, dna)
dna_meta %>%
ggplot(aes(x=Day, y=dna_conc)) +
geom_point() +
theme_test()
dna_dilute <-  dna_meta %>%
mutate(dna_total_wspike = (dna_conc*1000*15 + 0.014),
dna_conc_wspike = (dna_total_wspike/20)/1000,
dilute = if_else(dna_conc_wspike > 1, "Y", "N"),
dilute_dna_vol = if_else(dilute=="Y", 20/dna_conc_wspike, 20),
dilute_water_vol = 20-dilute_dna_vol) %>%
select(Sample, dilute_dna_vol, dilute_water_vol)
dna_dilute
count <- read_tsv("../data_amplicon/SFA2_nanotest/final/SFA2nano.counts-final.tsv", col_names = TRUE) %>%
rename(ASV=`#OTU ID`)
tax <- read_tsv("../data_amplicon/SFA2_nanotest/final/SFA2nano.taxonomy-final.tsv")
meta <- read_tsv("../data_amplicon/SFA2_nanotest/SFA2_nanotest_metadata.tsv")
# Read depth per sample
read_totals <- colSums(count[,-1])
# Isolate Aquifex reads
count_tax <- full_join(count, tax)
count_aquifex <- filter(count_tax, Genus=="Aquifex")
# Isolate mitochondrial reads
count_mito <- filter(count_tax, Family=="Mitochondria")
count_chloro <- filter(count_tax, Family=="Chloroplast")
count_plant <- bind_rows(count_mito, count_chloro)
# Spike-in read counts per sample
aquifex_totals <- count_aquifex %>%
select(-ASV, -Domain, -Phylum, -Class, -Order, -Family, -Genus, -Species) %>%
colSums() %>%
as_tibble
# Plant read counts
plant_totals <- count_plant %>%
select(-ASV, -Domain, -Phylum, -Class, -Order, -Family, -Genus, -Species) %>%
colSums() %>%
as_tibble
# Calculate % spike-in per sample
samples <- colnames(count[-1]) %>% as.double()
reads <- bind_cols(samples, read_totals, aquifex_totals, plant_totals) %>%
rename(SampleID = ...1, total_reads = ...2, aquifex_reads = value...3, plant_reads = value...4) %>%
mutate(prop_reads = aquifex_reads/total_reads,
prop_reads_noplant = aquifex_reads/(total_reads-plant_reads),
prop_plant = plant_reads/total_reads) %>%
inner_join(meta)
min(reads$prop_reads)
max(reads$prop_reads)
mean(reads$prop_reads)
median(reads$prop_reads)
min(reads$prop_reads_noplant)
max(reads$prop_reads_noplant)
mean(reads$prop_reads_noplant)
median(reads$prop_reads_noplant)
reads %>%
ggplot(aes(x=SampleID, y=prop_reads_noplant, color=Type)) +
geom_point() +
labs(y="Spike-in proportion of reads") +
theme_test()
reads %>%
ggplot(aes(x=Day, y=prop_reads_noplant, color=Type)) +
geom_point() +
labs(y="Spike-in proportion of reads") +
theme_test()
reads %>%
ggplot(aes(x=read_totals, y=prop_reads_noplant, color=Type)) +
geom_point() +
labs(y="Spike-in proportion of reads", y="Sample read depth") +
theme_test()
reads_dna <- inner_join(reads, dna, by = c("SampleID" = "Sample")) %>%
mutate(total_dna_pg = dna_conc*15*1000, # dna_conc is ng/uL, 15 uL sample
prop_dna = 0.0134/(total_dna_pg + 0.0134)) # double check
reads_dna %>%
filter(dna_conc > 0) %>%
ggplot(aes(x=dna_conc, y=prop_reads_noplant)) +
geom_point(aes(color=Type)) +
#geom_hline(yintercept=0.01, linetype=2) +
#geom_hline(yintercept=0.1, linetype=2) +
labs(y="Spike-in proportion of reads", x="DNA conc. (ng/uL)") +
theme_test()
reads_dna %>%
filter(dna_conc > 0) %>%
ggplot(aes(x=prop_dna, y=prop_reads_noplant)) +
geom_point(aes(color=Type)) +
#geom_hline(yintercept=0.01, linetype=2) +
#geom_hline(yintercept=0.1, linetype=2) +
labs(y="Spike-in proportion of reads", x="Spike-in proportion of total DNA") +
theme_test()
reads %>%
ggplot(aes(x=Day, y=prop_plant)) +
geom_point() +
theme_test() +
labs(y="Proportion of plant sequences")
head(reads)
head(count)
aquifex_asvs <- c("dcb3bef0dae347ae9e9a221481a107d1", "1b8f5da183f0c3dd76a9ec5b65ab7a80", "4493e856431009f7e9d1c6103eb14afd", "2cb514b6af0ba36f4ac5f5d72a22652d", "c36fbfc1ee8f443486071ec0510cf004", "899aebc71f8eb41b9b57eca16ebcdd3b", "8f8803789a88d06e69e2dc7da73cc3a3", "85724da5554a050148c996f4b0559787", "129b1aa0dba8ecb8beb41dbd8306f7cd", "920a823e074ff8e3a8325491caa69b8e", "dd1581891649215dff74a44adbf321a3", "3b944a74db929136fe0dbf1ab30e23c6", "ae7b5c44c7a64867658d955e254639d0", "853bae081e6bcb83d9cd7078d4320cf9", "bdd6e94480a524e192af795f31b6d20b", "30a412d80a1a562ca0bd0e38cfef2736", "73650468853f482ac84b6b36fce053c7", "101f79495f2eefc5690f0ff200fa5bd5", "0f658eaef95ca320581ad511ac38eac1", "3dbd975a4a7a792c0121bc92b5d93dbb", "033fed89ee8fab327c97b626599275a9", "8e3deeecc43597e7a5c17f9ddb3fedb2", "445e8681c3c1a735760e6c394f5f4d0a", "637a584a3f02ee6f7bb83f93ae448bc0")
head(count)
aquifex_count <- count %>% filter(ASV %in% aquifex_asvs)
head(aquifex_count)
View(aquifex_count)
head(yax)
head(tax)
aquifex_asvs <- tax %>%
filter(Genus=="Aquifex")
head(aquifex_asvs)
aquifex_asvs <- tax %>%
filter(Genus=="Aquifex") %>%
select(ASV)
ls
aquifex_asvs <- tax %>%
filter(Genus=="Aquifex") %>%
select(ASV)
head(aquifex_asvs)
dim(aquifex_asvs)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
knitr::opts_chunk$set(message = FALSE)
library("tidyverse")
sessionInfo()
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
knitr::opts_chunk$set(message = FALSE)
library("tidyverse")
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
knitr::opts_chunk$set(message = FALSE)
rm(list=ls())
library("tidyverse")
sessionInfo()
# Isolate Aquifex ASVs from raw data
count <- read_tsv(file="../data_amplicon/SFA2_nanotest/final/SFA2nano.counts-final.tsv")
tax <- read_tsv(file="../data_amplicon/SFA2_nanotest/final/SFA2nano.taxonomy-final.tsv")
aquifex_asvs <- tax %>%
filter(Genus=="Aquifex") %>%
select(OTU)
head(tax)
head(count)
# Isolate Aquifex ASVs from raw data
count <- read_tsv(file="../data_amplicon/SFA2_nanotest/final/SFA2nano.counts-final.tsv")
tax <- read_tsv(file="../data_amplicon/SFA2_nanotest/final/SFA2nano.taxonomy-final.tsv")
aquifex_asvs <- tax %>%
filter(Genus=="Aquifex") %>%
select(ASV)
aquifex_count <- count %>%
filter("`#OTU ID`" %in% aquifex_asvs$ASV) %>%
column_to_rownames(var = "`#OTU ID`")
?rename
aquifex_count <- count %>%
rename()
aquifex_count <- count %>%
filter(`#OTU ID` %in% aquifex_asvs$ASV) %>%
column_to_rownames(var = `#OTU ID`)
aquifex_count <- count %>%
filter("#OTU ID" %in% aquifex_asvs$ASV) #%>%
aquifex_count <- count %>%
filter("#OTU ID" %in% aquifex_asvs$ASV) %>%
column_to_rownames(var = "#OTU ID")
head(aquifex_count)
aquifex_count <- count %>%
filter("#OTU ID" %in% aquifex_asvs$ASV) #%>%
head(aquifex_count)
?rename
aquifex_count <- count %>%
rename(ASV = `#OTU ID`)
aquifex_count
column_to_rownames(var = "ASV")
aquifex_count <- count %>%
rename(ASV = `#OTU ID`) $>$
aquifex_count <- count %>%
rename(ASV = `#OTU ID`) %>%
filter(ASV %in% aquifex_asvs$ASV) %>%
column_to_rownames(var = "ASV")
head(aquifex_count)
dim(aquifex_count)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
knitr::opts_chunk$set(message = FALSE)
rm(list=ls())
library("tidyverse")
sessionInfo()
# Isolate Aquifex ASVs from raw data
count <- read_tsv(file="../data_amplicon/SFA2_nanotest/final/SFA2nano.counts-final.tsv")
tax <- read_tsv(file="../data_amplicon/SFA2_nanotest/final/SFA2nano.taxonomy-final.tsv")
aquifex_asvs <- tax %>%
filter(Genus=="Aquifex") %>%
select(ASV)
aquifex_count <- count %>%
rename(ASV = `#OTU ID`) %>%
filter(ASV %in% aquifex_asvs$ASV) %>%
column_to_rownames(var = "ASV")
# Calculate relative abundance of each ASV per sample
aquifex_count <- t(aquifex_count) %>% as.tibble()
aquifex_relabund <- aquifex_count %>%
add_column(total = rowSums(aquifex_count)) %>%
mutate(across(everything(), ~ (.x/total), .names = "{.col}")) %>%
select(-total) %>%
na.omit()
# Average relative abundance for each ASV across all samples
avg <- aquifex_relabund %>%
colMeans() %>%
as.data.frame()
# Maximum and minimum relative abundance for each ASV across all samples
min <- as.data.frame(apply(aquifex_relabund, 2, min))
max <-  as.data.frame(apply(aquifex_relabund,2,max))
# Create summary table
aquifex_summary <- bind_cols(avg, max, min) %>%
rownames_to_column(var="ASV")
colnames(aquifex_summary) <- c("ASV", "relabund_avg", "relabund_max", "relabund_min")
aquifex_summary
# Visual
aquifex_relabund %>%
pivot_longer(everything(), names_to = "ASV", values_to="relabund") %>%
ggplot() +
geom_boxplot(aes(x=ASV, y=relabund, group=ASV)) +
labs(title = "Aquifex ASV variants", x="ASV variants", y="relative abundance of variant") +
theme_test() +
theme(axis.text.x = element_text(angle=45))
write_tsv(aquifex_summary, file="SFA2nano_aquifex_asv_var_summary.tsv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
knitr::opts_chunk$set(message = FALSE)
rm(list=ls())
library("tidyverse")
sessionInfo()
# Isolate Aquifex ASVs from raw data
count <- read_tsv(file="../data_amplicon/SFA2_nanotest/final/SFA2nano.counts-final.tsv")
tax <- read_tsv(file="../data_amplicon/SFA2_nanotest/final/SFA2nano.taxonomy-final.tsv")
aquifex_asvs <- tax %>%
filter(Genus=="Aquifex") %>%
select(ASV)
aquifex_count <- count %>%
rename(ASV = `#OTU ID`) %>%
filter(ASV %in% aquifex_asvs$ASV) %>%
column_to_rownames(var = "ASV")
# Calculate relative abundance of each ASV per sample
aquifex_count <- t(aquifex_count) %>% as.tibble()
aquifex_relabund <- aquifex_count %>%
add_column(total = rowSums(aquifex_count)) %>%
mutate(across(everything(), ~ (.x/total), .names = "{.col}")) %>%
select(-total) %>%
na.omit()
# Average relative abundance for each ASV across all samples
avg <- aquifex_relabund %>%
colMeans() %>%
as.data.frame()
# Maximum and minimum relative abundance for each ASV across all samples
min <- as.data.frame(apply(aquifex_relabund, 2, min))
max <-  as.data.frame(apply(aquifex_relabund,2,max))
# Number of occurences
head(aquifex_count)
head(aquifex_asvs)
aquifex_asvs$ASV
aquifex_count$445e8681c3c1a735760e6c394f5f4d0a
head(aquifex_count)
aquifex_count$`445e8681c3c1a735760e6c394f5f4d0a``
a
)
``
aquifex_count$`445e8681c3c1a735760e6c394f5f4d0a`
print(occurences)}
# Number of samples each ASV appears in
for asv in aquifex_asvs$ASV:
# Number of samples each ASV appears in
for (asv in aquifex_asvs$ASV):
# Number of samples each ASV appears in
for (asv in aquifex_asvs$ASV) {
occurences <- length(aquifex_count$`asv` > 0)
print(occurences)
}
t(aquifex_count)
?across
# Number of samples each ASV appears in
aquifex_occur <- t(aquifex_count)
aquifex_occur %>%
mutate(across(everything(), ~if_else(.x > 0, 1, 0), {.cols})) %>%
for (asv in aquifex_asvs$ASV) {
aquifex_temp <- t(aquifex_count)
aquifex_temp %>%
}
# Number of samples each ASV appears in
aquifex_occur <- t(aquifex_count)
aquifex_occur %>%
mutate(across(everything(), ~if_else(.x > 0, 1, 0), {.cols})) #%>%
# Number of samples each ASV appears in
aquifex_occur <- t(aquifex_count) %>% as.data.frame()
aquifex_occur %>%
mutate(across(everything(), ~if_else(.x > 0, 1, 0), {.cols})) #%>%
aquifex_occur %>%
mutate(across(everything(), ~if_else(.x > 0, 1, 0), {.cols})) %>%
View()
aquifex_occur %>%
mutate(across(everything(), ~if_else(.x > 0, 1, 0), {.cols})) %>%
rowSums()
aquifex_occur %>%
mutate(across(everything(), ~if_else(.x > 0, 1, 0), {.cols})) %>%
rowSums() %>%
bind_cols(aquifex_asvs, .)
aquifex_occur <- aquifex_occur %>%
mutate(across(everything(), ~if_else(.x > 0, 1, 0), {.cols})) %>%
rowSums() %>%
bind_cols(aquifex_asvs, .)
head(aquifex_occur)
head(aquifex_count)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(results = "show")
knitr::opts_chunk$set(message = FALSE)
rm(list=ls())
library("tidyverse")
sessionInfo()
# Isolate Aquifex ASVs from raw data
count <- read_tsv(file="../data_amplicon/SFA2_nanotest/final/SFA2nano.counts-final.tsv")
tax <- read_tsv(file="../data_amplicon/SFA2_nanotest/final/SFA2nano.taxonomy-final.tsv")
aquifex_asvs <- tax %>%
filter(Genus=="Aquifex") %>%
select(ASV)
aquifex_count <- count %>%
rename(ASV = `#OTU ID`) %>%
filter(ASV %in% aquifex_asvs$ASV) %>%
column_to_rownames(var = "ASV")
# Calculate relative abundance of each ASV per sample
aquifex_count <- t(aquifex_count) %>% as.tibble()
aquifex_relabund <- aquifex_count %>%
add_column(total = rowSums(aquifex_count)) %>%
mutate(across(everything(), ~ (.x/total), .names = "{.col}")) %>%
select(-total) %>%
na.omit()
# Average relative abundance for each ASV across all samples
avg <- aquifex_relabund %>%
colMeans() %>%
as.data.frame()
# Maximum and minimum relative abundance for each ASV across all samples
min <- as.data.frame(apply(aquifex_relabund, 2, min))
max <-  as.data.frame(apply(aquifex_relabund,2,max))
# Number of samples each ASV appears in
aquifex_occur <- t(aquifex_count) %>% as.data.frame()
occur <- aquifex_occur %>%
mutate(across(everything(), ~if_else(.x > 0, 1, 0), {.cols})) %>%
rowSums() %>%
bind_cols(aquifex_asvs, .)
occur
occur <- aquifex_occur %>%
mutate(across(everything(), ~if_else(.x > 0, 1, 0), {.cols})) %>%
rowSums()
occur
max
occur <- aquifex_occur %>%
mutate(across(everything(), ~if_else(.x > 0, 1, 0), {.cols})) %>%
rowSums() %>%
as.data.frame()
occur
occur <- aquifex_occur %>%
mutate(across(everything(), ~if_else(.x > 0, 1, 0), {.cols})) %>%
rowSums() %>%
bind_cols(aquifex_asvs, .)
occur
min
occur
occur <- aquifex_occur %>%
mutate(across(everything(), ~if_else(.x > 0, 1, 0), {.cols})) %>%
rowSums() %>%
bind_cols(aquifex_asvs, .) %>%
column_to_rownames(var="ASV")
occur
# Create summary table
aquifex_summary <- bind_cols(avg, max, min, occur) %>%
rownames_to_column(var="ASV")
aquifex_summary
colnames(aquifex_summary) <- c("ASV", "relabund_avg", "relabund_max", "relabund_min",
"num_samples")
aquifex_summary
write_tsv(aquifex_summary, file="SFA2nano_aquifex_asv_var_summary.tsv")
